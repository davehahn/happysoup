<apex:page controller="gcInventoryMovementCube_Report" showHeader="true" sidebar="true" cache="false" readOnly="true">

<head>
<style>
tr.pq-row-select td{
    background-color:yellow;
}
tr.total td{
    font-weight: bold;
}
/*div.pq-grid-footer{
    display:none;
}*/
.colHighlight{
    background-color: yellow;
}
</style>

<link rel="stylesheet" href="https://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.css')}"/>

</head>
<body>
    <div style="width:98%; margin:0 auto">
        <table width="100%">
            <tr style="text-align:center;" id="datepickerContainer">
                <td colspan="2">
                    Inventory as of:&nbsp;&nbsp;<input type="text" id="datepicker" readonly="true"/>
                    <apex:form >
                    <div style="display: {!IF($CurrentPage.parameters.id == null,'','none;')}">
                        Select a Product Type:
                        <span class="typeSelector">
                        <apex:selectList size="1" onchange="refreshAll();">
                            <apex:selectOptions value="{!listProductType}"/>
                        </apex:selectList>
                        </span>
                    </div>
                    </apex:form>                    
                </td>
            </tr>
            <tr>
                <td width="25%">
                    <div><div id="warehouse"></div></div>
                </td>
                <td width="75%">
                    <div><div id="product"></div></div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <div><div id="detail"></div></div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <div id="maps"></div>
                </td>
            </tr>
        </table>
    </div>
</body>

<apex:includeScript value="{!$Resource.GMBLJS__jQuery}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.js')}"/>
<apex:includeScript value="{!$Resource.GMBLJS__accountingJS}"/>
<apex:includeScript value="{!$Resource.GMBLJS__ExcellentExport}"/>

<apex:includeScript value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.js')}"/>

<apex:includeScript value="{!$Resource.GMBLJS__gsrSpinner}"/>
<apex:includeScript value="{!$Resource.GMBLJS__gsrGrid2}"/>

<script>function setFocusOnLoad() {}</script>
<script type="text/javascript">

    $j = jQuery.noConflict();
    var currentTheme = "{!$User.UITheme}";

    $j(document).ready(function()
    {
        $j('span.typeSelector select').val('{!idRTProductPart}');
        initDatePicker();
        initGrid_warehouse();
        initGrid_product();
        initGrid_detail();
    });

    var hideUnitCosts = {!IF($Permission.CanViewInventoryCost,false,true)}
    accounting.settings = {
        currency: {
            symbol : "$",   // default currency symbol is '$'
            format: "%s%v", // controls output: %s = symbol, %v = value/number (can be object: see below)
            decimal : ".",  // decimal point separator
            thousand: ",",  // thousands separator
            precision : 2   // decimal places
        },
        number: {
            precision : 0,  // default precision on numbers is 0
            thousand: ",",
            decimal : "."
        }
    }

    function initDatePicker()
    {
        $j('#datepicker').datepicker({'showButtonPanel':true});

        if('{!locale}' == 'en_CA') $j('#datepicker').datepicker( "option", "dateFormat", "dd/mm/yy" );

        $j('#datepicker').datepicker('setDate', new Date());

        $j('#datepicker').change(function()
        {
            $j('#warehouse').pqGrid('selection',{type:'row',method:'removeAll'});
            $j('#product').pqGrid('selection',{type:'row',method:'removeAll'});
            refreshAll();
        });
    }

    function refreshAll() {
        refreshGrid_warehouse();
        refreshGrid_product();
        refreshGrid_detail();
    }

    function initGrid_warehouse()
    {
        var gridObj = {title:"Inventory by Warehouse",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {minWidth:10, sortable:true},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:'up', sortIndx:'warehouseName'},
                        detailModel:{cache:false},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true, type:'local'},
                        freezeCols:0,
                        freezeRows:0,
                        height:300,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:false},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: {type:'row', mode:'range', fireSelectChange:true},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:true,
                        sortable:true,
                        swipeModel:{on:false},
                        track:false,
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:"warehouseName",        title:"Name",           align:"left",   dataType:"string", gFilter:"text"},
                          {dataIndx:"amt",  title:"Cost",   align:"right",  dataType:"float",   gFormat:'money',    gTotal:true,    maxWidth:100,   hidden:hideUnitCosts},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        var $gridDiv = $j('#warehouse');

        $gridDiv.pqGrid(gridObj);

        gGrid.appendExportLink($gridDiv);

        gGrid.appendButtonClearSelection($gridDiv);

        $gridDiv.on('pqgridrefresh', function(event, ui)
        {
            gGrid.refreshTotal($j(this),ui.pageData);
        });

        $gridDiv.on('pqgridselectchange',function(event,ui)
        {
            $j('#product').pqGrid( "setSelection", null );
            refreshGrid_detail();
        });

        refreshGrid_warehouse();

        gridObj = null;
    }

    function refreshGrid_warehouse()
    {
        gSpinner.show();
        var $gridDiv = $j('#warehouse');
        var idType = $j('span.typeSelector select').val();
        var filter = {'dateThru':[$j('#datepicker').val()],'idProductType':[idType]};
        var groupBy = ['idWarehouse'];

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcInventoryMovementCube_Report.inventorySummary}',
            filter, groupBy,
            function(result,event){
                if(event.status){
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else{
                    alert(event.message);
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        filter = null;
        groupBy = null;
    }

    function initGrid_product()
    {
        var gridObj = {title:"Inventory by Product",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {minWidth:10, sortable:true},
                        dataModel:{data:null, sorting:'local', location:'local', sortDir:'up', sortIndx:'productName'},
                        detailModel:{cache:false},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true, type:'local'},
                        freezeCols:0,
                        freezeRows:0,
                        height:300,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type: 'local',rPP:100},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: {type:'row', mode:'range', fireSelectChange:true},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:true,
                        sortable:true,
                        swipeModel:{on:true},
                        track:false,
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: true,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:"productRecordType",        title:"Record Type",        align:"left",   dataType:"string", gFilter:"select"},
                          {dataIndx:"productFamily",            title:"Product Family",     align:"left",   dataType:"string", gFilter:"select", cls:'skipFormatting'},
                          {dataIndx:"productName",              title:"Product Name",       align:"left",   dataType:"string",  gFilter:"text", cls:'skipFormatting'},
                          {dataIndx:"productCode",              title:"Product Code",       align:"left",   dataType:"string",  gFilter:"text", maxWidth:150, cls:'skipFormatting'},
                          {dataIndx:"productIsActive",          title:"Active", gFormat:"checkbox",   gFilter:"select", minWidth:60, maxWidth:60, cls:'checkBoxCheck'},
                          {dataIndx:"qty",      title:"Units",              align:"right",  dataType:"float", gFormat:'number', maxWidth:75, cls:'actualNumber'},
                          {dataIndx:"amt",          title:"Cost",               align:"right",  dataType:"float", gFormat:'money', gTotal:true, maxWidth:100,   hidden:hideUnitCosts},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        var $gridDiv = $j('#product');

        $gridDiv.pqGrid(gridObj);

        gGrid.appendExportLink($gridDiv);

        gGrid.appendButtonClearSelection($gridDiv);

        $gridDiv.on('pqgridrefresh', function(event, ui)
        {
            gGrid.refreshTotal($j(this),ui.dataModel.data);
        });

        $gridDiv.on('pqgridselectchange',function(event,ui)
        {
            $j('#warehouse').pqGrid( "setSelection", null );
            refreshGrid_detail();
        });

        refreshGrid_product();

        gridObj = null;
    }

    function refreshGrid_product()
    {
        gSpinner.show();
        var $gridDiv = $j('#product');

        var idType = $j('span.typeSelector select').val();
        var filter = {'dateThru':[$j('#datepicker').val()],'idProductType':[idType]};
        var groupBy = ['idProduct'];

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcInventoryMovementCube_Report.inventorySummary}',
            filter, groupBy,
            function(result,event){
                if(event.status){
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else{
                    alert(event.message);
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        filter = null;
        groupBy = null;
    }

    function initGrid_detail()
    {
        var gridObj = {title:"Inventory Detail",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {minWidth:10, sortable:true},
                        dataModel:{data:null, sorting:'local', location:'local', sortDir:'up'},
                        detailModel:{cache:false},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true, type:'local'},
                        freezeCols:0,
                        freezeRows:0,
                        height:300,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type: 'local',rPP:100},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: {type:null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:true,
                        sortable:true,
                        swipeModel:{on:false},
                        track:false,
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: true,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:"warehouseName",        title:"Warehouse",          align:"left",   dataType:"string",  gFilter:"text"},
                          {dataIndx:"idProduct",            title:"Product Id",         align:"left",   dataType:"string",  cls:'skipFormatting', maxWidth:5},
                          {dataIndx:"productName",          title:"Product Name",       align:"left",   dataType:"string",  gFilter:"text", cls:'skipFormatting'},
                          {dataIndx:"productCode",          title:"Product Code",       align:"left",   dataType:"string",  gFilter:"text", cls:'skipFormatting'},
                          {dataIndx:"lotName",              title:"Lot #",              align:"left",   dataType:"string",  gFilter:"text", cls:'skipFormatting'},
                          {dataIndx:"serialName",           title:"Serial #",           align:"left",   dataType:"string",  gFilter:"text", cls:'skipFormatting'},
                          {dataIndx:"serialModelYear",      title:"Model Year",         align:"left",   dataType:"string",  gFilter:"text", maxWidth:75, cls:'skipFormatting'},
                          {dataIndx:"dealerRigged",         title:"Dealer&nbsp;<br/>Rigged",  align:"center", gFilter:"select", gFormat: "checkbox", minWidth:55, maxWidth:65, cls:'checkBoxCheck'},
                          {dataIndx:"description",          title:"Nested Serials",     align:"left",   dataType:"string",  gFilter:"text"},
                          {dataIndx:"qty",                  title:"Units",              align:"right",  dataType:"float", gFormat:'number', gTotal:true, maxWidth:75, cls:'actualNumber'},
                          {dataIndx:"avg",                  title:"Unit Cost",          align:"right",  dataType:"float", gFormat:'money', maxWidth:100,   hidden:hideUnitCosts},
                          {dataIndx:"amt",                  title:"Total Cost",         align:"right",  dataType:"float", gFormat:'money', maxWidth:100, gTotal:true,   hidden:hideUnitCosts},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'productName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idProduct) return '';

                        var myHTML = ui.rowData.productName;

                        if({!$ObjectType.Product2.accessible})
                            return '<a href=\"/'+ui.rowData.idProduct+'\" target=\"_blank\">'+myHTML+'</a>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'productCode')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.productCode) return '';

                        var myHTML = ui.rowData.productCode;

                        if({!$ObjectType.Product2.accessible})
                            return '<a href=\"/'+ui.rowData.idProduct+'\" target=\"_blank\">'+myHTML+'</a>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'lotName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idLot) return '';

                        if({!$ObjectType.GMBLASERP__Lot__c.accessible})
                            return '<a href=\"/'+ui.rowData.idLot+'\" target=\"_blank\">'+ui.rowData.lotName+'</a>';
                        else
                            return ui.rowData.lotName;
                    }
                });
            }

            else if(col.dataIndx == 'serialName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idSerial) return '';

                        if(ui.rowData.dealerRigged != undefined && ui.rowData.dealerRigged == 'true')
                            $gridDiv.pqGrid( "addClass", {rowIndx:ui.rowIndx, dataIndx:ui.dataIndx, cls:'colHighlight'} );

                        if({!$ObjectType.GMBLASERP__Serial_Number__c.accessible})
                            return '<a href=\"/'+ui.rowData.idSerial+'\" target=\"_blank\">'+ui.rowData.serialName+'</a>';
                        else
                            return ui.rowData.serialName;
                    }
                });
            }

            else if(col.dataIndx == 'description')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.description) return '';

                        // var myHTML = ui.rowData.description.replace('; ','<br/>');
                        var myHTML = ui.rowData.description.replace(new RegExp('; ', 'g'), '<br/>');

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'avg')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';

                        return accounting.formatMoney(ui.rowData.avg);
                    }
                });
            }
        });

        var $gridDiv = $j('#detail');

        $gridDiv.pqGrid(gridObj);

        gGrid.appendExportLink($gridDiv);

        gGrid.appendButtonClearFilters($gridDiv);

        //generateExportLink($gridDiv);

        $gridDiv.on('pqgridrefresh', function(event, ui)
        {
            gGrid.refreshTotal($j(this),ui.dataModel.data);
        });

        gridObj = null;
    }

    function refreshGrid_detail()
    {
        gSpinner.show();

        var $gridDiv = $j('#detail');
        var idType = $j('span.typeSelector select').val();
        var filter = {'dateThru':[$j('#datepicker').val()],'idProductType':[idType]};

        //collect the ids of the selected products
        var idProductArray = [];
        $j.each($j('#product').pqGrid( "selection",{type:'row', method:'getSelection'}), function(i,row)
        {
            idProductArray.push(row.rowData.idProduct);
        });
        if(idProductArray.length > 0)
        {
            $j.extend(filter,{'idProduct':idProductArray});
        }

        //collect the ids of the select warehouses
        var idWarehouseArray = [];
        $j.each($j('#warehouse').pqGrid( "selection",{type:'row', method:'getSelection'}), function(i,row)
        {
            idWarehouseArray.push(row.rowData.idWarehouse);
        });
        if(idWarehouseArray.length > 0)
        {
            $j.extend(filter,{'idWarehouse':idWarehouseArray});
        }

        //if no products or warehouses are selected, then empty the grid, otherwise refresh the grid.
        if(idWarehouseArray.length == 0 && idProductArray.length == 0)
        {
            gGrid.refreshGrid_callback($gridDiv,[]);
            gSpinner.hide();
        }
        else
        {
        //console.log('filter: '+JSON.stringify(filter));
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcInventoryMovementCube_Report.inventorySummary}',
            filter,['idWarehouse','idProduct','idLot','idSerial'],
            function(result,event){
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message); gSpinner.hide();
                }
                gSpinner.hide();
            },
            { buffer:true, escape:true, timeout:120000});
        }
        filter = null;
        idProductArray = null;
        idWarehouseArray = null;
    }
    if(currentTheme != 'Theme4d')
    {
        gGrid.export = function($gridDiv,aTag){
            // $gridDiv.pqGrid('showLoading');
            gSpinner.show();
            /// Header table
            var title = $gridDiv.pqGrid('option','title');
            $topTable = jQuery('<table></table>');
            var $topTableRow = jQuery('<tr></tr>'); 
            $topTable.attr('id','exportTable');

            jQuery('<tr></tr>')
                .append(
                    jQuery('<td></td>')
                        .html('Legend Boats: ' + title)
                        .css({'font-weight':'bold','font-size':'16px'}))
                .appendTo($topTable);

            var dt = new Date();
            var dtString = dt.toLocaleString();
            jQuery('<tr></tr>')
                .append(
                    jQuery('<td></td>')
                        .append('<div><strong>Report Date: </strong>'+dtString+'</div>')
                        .css({'font-size':'10px'}))
                .appendTo($topTable);

            //create the data table
            $table = jQuery('<table></table>');
            //create header rows
            jQuery.each($gridDiv.find('table.pq-grid-header-table:last tr.pq-grid-title-row:first'), function(i, headerRow){
                if(!jQuery(headerRow).hasClass('pq-row-hidden') && jQuery(headerRow).is(':visible'))
                {
                    var $newRow = jQuery('<tr></tr>'); 
                    jQuery(headerRow).children().each(function(i, v) {
                        if(!jQuery(v).hasClass('pq-grid-number-col'))
                        {
                            var $newTh = jQuery('<th></th>')
                                                .css('border','1px solid black')
                                                .html('<strong>' + jQuery(v).text() + '</strong>');
                            $newRow.append($newTh);
                        }
                    });
                    $table.append($newRow);
                }
            });
            //create body rows
            var precLevel = '\\.00\\';

            var amountFormat = "\\0022$\\0022\\#\\,\\#\\#0"+precLevel+"_\\)\\;\\[Red\\]\\\\(\\0022$\\0022\\\\#\\,\\#\\#0"+precLevel+"\\);";
            var numberFormat = "\\0022\\0022\\#\\,\\#\\#0"+precLevel+"_\\)\\;\\[Red\\]\\\\(\\0022$\\0022\\\\#\\,\\#\\#0"+precLevel+"\\);";
            jQuery.each($gridDiv.find('div.pq-grid-center table.pq-grid-table:first tr'), function(i, detailRow){
                var $curentRow = jQuery(detailRow);
                if(!$curentRow.hasClass('pq-row-hidden') && $curentRow.is(':visible'))
                {
                    var $newRow = jQuery('<tr></tr>'); 
                    if($curentRow.hasClass('pq-summary-row') || $curentRow.hasClass('pq-group-row'))
                        $newRow.css('font-weight','bold');

                    $curentRow.children().each(function(i, v) {
                        var $cTd = jQuery(v);
                        if(!$cTd.hasClass('pq-grid-number-cell'))
                        {
                            var txt = $cTd.text();
                            var numberField = false;
                            var negativeNumberField = false;
                            if($cTd.hasClass('checkBoxCheck'))
                                txt = $cTd.find('input').is(':checked') ? 'true' : 'false';
                            if((txt != '' || txt != null) && i > 0){
                                txt = txt.replace(/[()]/g, "");
                                if(!isNaN(txt.replace(/[$(),]/g, "")) && !$cTd.hasClass('skipFormatting'))
                                    numberField = true;
                            }

                            if($cTd.children('strong').length) txt = '<strong>' + txt + '</strong>';
                            var $newTd = jQuery('<td style="mso-style-name:Normal;mso-number-format:\\\@"></td>');
                            
                            if(numberField){
                                // $newTd = jQuery('<td style="mso-number-format:'+amountFormat+'"></td>');
                                if($cTd.hasClass('actualNumber'))
                                    $newTd = jQuery('<td style="mso-number-format:'+numberFormat+'"></td>');
                                else
                                    $newTd = jQuery('<td style="mso-number-format:'+amountFormat+'"></td>');
                            }

                            $newTd.html(txt);
                            $newRow.append($newTd);
                        }
                    });
                    $table.append($newRow);
                }
            });
            //create total row
            jQuery.each($gridDiv.find('table.pq-grid-table:last tr.total'), function(i, totalRow){
                if(!jQuery(totalRow).hasClass('pq-row-hidden') && jQuery(totalRow).is(':visible'))
                {
                    var $newRow = jQuery('<tr></tr>').css('font-weight','bold');
                    jQuery(totalRow).children().each(function(i, v) { 
                        var $cTd = jQuery(v);
                        if(!jQuery(v).hasClass('pq-grid-number-cell'))
                        {
                            var txt = jQuery(v).text();
                            var numberField = false;
                            if((txt != '' || txt != null) && i > 0){
                                txt = txt.replace(/[()]/g, "");
                                if(!isNaN(txt.replace(/[$(),]/g, "")) && !$cTd.hasClass('skipFormatting'))
                                numberField = true;
                            }
                            var $newTd = jQuery('<td></td>');
                            if(numberField)
                            {
                                if($cTd.hasClass('actualNumber'))
                                    $newTd = jQuery('<td style="mso-number-format:'+numberFormat+'"></td>');
                                else
                                    $newTd = jQuery('<td style="mso-number-format:'+amountFormat+'"></td>');
                            }

                            $newTd.html(txt);
                            $newRow.append($newTd);
                        }
                    });
                    $table.append($newRow);
                }
            });

            jQuery('<tr></tr>')
                .append(jQuery('<td></td>').append($table))
                .appendTo($topTable);

            var $exportStage = jQuery('<div></div>');
            $exportStage.append($topTable);
            jQuery(document.body).append($exportStage);
            ExcellentExport.excel(aTag, 'exportTable','');
            $exportStage.remove();

            gSpinner.hide();
        }
    }

    function generateExportLink($gridDiv)
    {
        var $exportLink = jQuery('<a href=\'#\'>Export From Server</a>');
            $exportLink.on('click',function()
            {
                exportDataToCSV($gridDiv);
            });

        $gridDiv.find('div.pq-grid-title').append('&nbsp;&nbsp;');
        $gridDiv.find('div.pq-grid-title').append($exportLink);
    }

    function exportDataToCSV($gridDiv) {
        // body...
    }
</script>

</apex:page>