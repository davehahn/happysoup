<apex:page controller="AccountReceivableByGL_ar" showHeader="true" sidebar="false" cache="false" readOnly="true"  lightningStylesheets="true">
<apex:includeLightning />
<head>
<style>
tr.pq-row-select td{
    background-color:yellow;
}
tr.total td{
    font-weight: bold;
}
.colHighlight{
    background-color: yellow;
}
</style>

<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/themes/Office/pqgrid.css')}"/>
    
</head>
<body>
    <div style="width:100%; padding: 0; margin:0 auto">
        <table width="100%">
            <tr>
                <td align="center">
                    <button class="slds-button slds-button_brand" onclick="previousPeriod()">&larr; Previous Period</button>&nbsp;
                    <select name="periodSelector" id="periodSelector" onchange="refreshGrid_report()">
                        <apex:repeat value="{!periods}" var="p">
                            <option value="{!p.Id}">{!p.Name}</option>
                        </apex:repeat>
                    </select>
                    &nbsp;<button class="slds-button slds-button_brand" onclick="nextPeriod()">Next Period &rarr;</button>
                </td>
            </tr>
            <tr><td>&nbsp;</td></tr>
            <tr>
                <td>
                    <div><div id="reportdiv"></div></div>
                </td>
            </tr>
        </table>
    </div>
    <div id="lightning" />

</body>
<apex:includeScript value="{!$Resource.GMBLJS__jQuery}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.js')}"/>
<apex:includeScript value="{!$Resource.GMBLJS__accountingJS}"/>
<apex:includeScript value="{!$Resource.GMBLJS__ExcellentExport}"/>

<apex:includeScript value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.js')}"/>

<apex:includeScript value="{!$Resource.GMBLJS__gsrSpinner}"/>
<apex:includeScript value="{!$Resource.GMBLJS__gsrGrid2}"/>

<script>function setFocusOnLoad() {}</script>
<script type="text/javascript">

    $j = jQuery.noConflict();
    var currentTheme = "{!$User.UITheme}";

    $j(document).ready(function()
    {
        initGrid_report();
    });

    accounting.settings = {
        currency: {
            symbol : "$",   // default currency symbol is '$'
            format: "%s%v", // controls output: %s = symbol, %v = value/number (can be object: see below)
            decimal : ".",  // decimal point separator
            thousand: ",",  // thousands separator
            precision : 2   // decimal places
        },
        number: {
            precision : 0,  // default precision on numbers is 0
            thousand: ",",
            decimal : "."
        }
    }

    function initGrid_report()
    {
        var gridObj = {title:"Receivable Balance by Account",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {minWidth:10, sortable:true},
                        dataModel:{data:null, sorting:'local', location:'local', sortDir:'up'},
                        detailModel:{cache:false},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true, type:'local'},
                        freezeCols:0,
                        freezeRows:0,
                        height:550,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type: 'local',rPP:100},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: {type:null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:true,
                        sortable:true,
                        swipeModel:{on:false},
                        track:false,
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: true,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:"accountName",        title:"Name",           align:"left",   dataType:"string", gFilter:"text"},
                          {dataIndx:"accountGLName",      title:"Business Unit(GLV1)",           align:"left",   dataType:"string", gFilter:"text"},
                          {dataIndx:"billingBalance",  title:"AR Control GL",   align:"right",  dataType:"float",   gFormat:'money',    gTotal:true,    maxWidth:120},
                          {dataIndx:"depositsBalance",  title:"Deposits GL",   align:"right",  dataType:"float",   gFormat:'money',    gTotal:true,    maxWidth:120},
                          {dataIndx:"receiptBalance",  title:"Unapplied GL",   align:"right",  dataType:"float",   gFormat:'money',    gTotal:true,    maxWidth:120},
                          {dataIndx:"actualBalance",  title:"Balance",   align:"right",  dataType:"float",   gFormat:'money',    gTotal:true,    maxWidth:120},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'accountName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal) return '';
                        if (ui.rowData.accountId == null) return '';

                        return '<a href=\"/'+ui.rowData.accountId+'\" target=\"_blank\">'+ui.rowData.accountName+'</a>';
                    }
                });
            }else if(col.dataIndx == 'depositsBalance')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.depositsBalance);
                        if (ui.rowData.accountId == null) return '';

                        return '<a onclick="createTransactionsComponent(\''+ui.rowData.accountId+'\',\'deposits\')" href=\"javascript:void(0);\">'+accounting.formatMoney(ui.rowData.depositsBalance)+'</a>';
                    }
                });
            }else if(col.dataIndx == 'billingBalance')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.billingBalance);
                        if (ui.rowData.accountId == null) return '';

                        return '<a onclick="createTransactionsComponent(\''+ui.rowData.accountId+'\',\'arcontrol\')" href=\"javascript:void(0);\">'+accounting.formatMoney(ui.rowData.billingBalance)+'</a>';
                    }
                });
            }else if(col.dataIndx == 'receiptBalance')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.receiptBalance);
                        if (ui.rowData.accountId == null) return '';

                        return '<a onclick="createTransactionsComponent(\''+ui.rowData.accountId+'\',\'unapplied\')" href=\"javascript:void(0);\">'+accounting.formatMoney(ui.rowData.receiptBalance)+'</a>';
                    }
                });
            }
        });


        var $gridDiv = $j('#reportdiv');

        $gridDiv.pqGrid(gridObj);

        gGrid.appendExportLink($gridDiv);

        $gridDiv.on('pqgridrefresh', function(event, ui)
        {
            gGrid.refreshTotal($j(this),ui.dataModel.data);
        });

        refreshGrid_report();

        gridObj = null;
    }

    function refreshGrid_report()
    {
        gSpinner.show();
        var $gridDiv = $j('#reportdiv');
        var idPeriod = $j("#periodSelector").val();
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.AccountReceivableByGL_ar.retrieveAccountTxnDetails}',
            idPeriod,
            function(result,event){
                if(event.status){
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else{
                    alert(event.message);
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        filter = null;
        groupBy = null;
    }

    function previousPeriod()
    {
        gSpinner.show();
        var $gridDiv = $j('#reportdiv');
        var idPeriod = $j("#periodSelector").val();
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.AccountReceivableByGL_ar.retrievePreviousPeriod}',
            idPeriod,
            function(result,event){
                if(event.status){
                    $j("#periodSelector").val(result).trigger('onchange');
                }
                else{
                    alert(event.message);
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        filter = null;
        groupBy = null;
    }

    function nextPeriod()
    {
        gSpinner.show();
        var $gridDiv = $j('#reportdiv');
        var idPeriod = $j("#periodSelector").val();
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.AccountReceivableByGL_ar.retrieveNextPeriod}',
            idPeriod,
            function(result,event){
                if(event.status){
                    $j("#periodSelector").val(result).trigger('onchange');
                }
                else{
                    alert(event.message);
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        filter = null;
        groupBy = null;
    }

    function createTransactionsComponent(idAcc,type) {
        $Lightning.use("c:visualforceLightningComp", function() {
            $Lightning.createComponent(
                "c:AccountTransactions_ar",{
                    "idAccount": idAcc,
                    "idPeriod": $j("#periodSelector").val(),
                    "glAccountType": type
                },
                "lightning",
                function(newcomponent){}            
            );
        });
    }

</script>
</apex:page>