<apex:page title="{!AcctSeed__Project__c.Name}" standardController="AcctSeed__Project__c" extensions="gcProject_Ext,gcSerialNumber_Ext,gcProject_AccountingActions,gcProject_TimeCardLedger" cache="false" docType="html-5.0" showChat="false" showHeader="false" sidebar="true" lightningStylesheets="true">
<apex:includeLightning />
<head>
<title>{!AcctSeed__Project__c.Name}</title>
<style>
body {
    background: #FFF !important;
}
.bPageTitle,
.bPageBlock.bDetailBlock > .pbHeader,
.bPageBlock.bDetailBlock > .pbBottomButtons {
    display:none !important;
}

.bPageBlock {
    position:relative !important;
    top:-30px !important;
}
.link{
    cursor:pointer;
    text-decoration:underline;
}
table{
    width:100%;
    border-collapse:collapse;
}
tr.total td{
    font-weight: bold;
}
div.pq-grid-footer{
    display:none;
}
td.right{
    text-align:right;
}
.highlight{
    background-color: yellow;
}
#ui-datepicker-div{
    z-index: 9999 !important;
}
input.dateSelector{
    min-width: auto !important;
}
.noshow{
    display: none;
}
</style>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.css')}"/>
<apex:includeScript value="{!$Resource.GMBLJS__jQuery}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/touch-punch/touch-punch.min.js')}"/>
<apex:includeScript value="{!$Resource.GMBLJS__accountingJS}"/>
<apex:includeScript value="{!$Resource.GMBLJS__ExcellentExport}"/>
<apex:includeScript value="{!$Resource.GMBLJS__gsrSpinner}"/>
<apex:includeScript value="{!$Resource.GMBLJS__gsrGrid2}"/>
<script>function setFocusOnLoad() {}</script>
<script type="text/javascript">
    $j = jQuery.noConflict();
    var isInternal = {!AcctSeed__Project__c.AcctSeed__Account__r.Is_Internal__c};
    var paymentMethods = [];
    var currentTheme = "{!$User.UITheme}";
    var idDefaultWarehouse = '{!IF(idDefaultWarehouse == null,AcctSeed__Project__c.GMBLASERP__Warehouse__c,idDefaultWarehouse)}';
    $j(document).ready(function()
    {
        initGrid_tasks();
        initGrid_materials();
        initGrid_serials();
        initGrid_ledger();
        initGrid_timeCardLedger();
        refreshAll();
        initPaymentMethods();

        $j('input.dateSelector').datepicker({'showButtonPanel':true});

        if('{!locale}' == 'en_CA') $j('input.dateSelector').datepicker( "option", "dateFormat", "dd/mm/yy" );
        else  if('{!locale}' == 'fr_CA') $j('input.dateSelector').datepicker( "option", "dateFormat", "yy-mm-dd" );
        $j('input.dateSelector').datepicker('setDate', new Date());

        if(typeof refreshTimecardLines !== 'undefined')
            refreshTimecardLines();

        $j(document).ajaxComplete(function(d) {
            console.log("daaaa");
            console.log(d);
        });

        $j('#materials').on( "focus", "input.taskAutoComplete", function( event ) {
            $currentSelection = null;
            $inputField = $j(this);
            $inputField.autocomplete({
                minLength: 0,
                autoFocus: false,
                source: function (request, response) {
                    // var rowIndx = $inputField.prop('id');
                    // var $gridDiv = $j('#materials');
                    // var rowData = $gridDiv.pqGrid( "getRowData", {rowIndx:rowIndx});
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.gcProject_Ext.searchProjectTask}',
                         request.term, '{!Id}',
                        function (result, event) {
                            if (event.status) {
                                $j.each(result,function(k,item){
                                    if(item.label == undefined)
                                        result[k].label = item.Name;
                                    if(item.value == undefined)
                                        result[k].value = item.Id;
                                })
                                response(result);
                            } else {
                                alert(event.message);
                            }
                        }, {
                            buffer: true,
                            escape: true,
                            timeout: 120000
                        });
                },
                focus: function (event, ui) {
                    $inputField.val(ui.item.Name);
                    $currentSelection = ui.item;
                    return false;
                },
                select: function (event, ui) {
                    var rowIndx = $inputField.prop('id');
                    updateMaterialTask(rowIndx,ui.item);
                    return false;
                },
                change: function (event, ui) {
                    var rowIndx = $inputField.prop('id');
                    if($currentSelection != null)
                    {
                        updateMaterialTask(rowIndx,$currentSelection);
                        $currentSelection = null;
                    }
                    return false;
                }
            });
        });

        $j('#tasks').on( "focus", "input.glv1AutoComplete", function( event ) {
            $currentSelection = null;
            $inputField = $j(this);
            $inputField.autocomplete({
                minLength: 0,
                autoFocus: false,
                source: function (request, response) {
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.gcProject_Ext.searchGLV}',
                         request.term, 'glv1',
                        function (result, event) {
                            if (event.status) {
                                $j.each(result,function(k,item){
                                    if(item.label == undefined)
                                        result[k].label = item.Name;
                                    if(item.value == undefined)
                                        result[k].value = item.Id;
                                })
                                response(result);
                            } else {
                                alert(event.message);
                            }
                        }, {
                            buffer: true,
                            escape: true,
                            timeout: 120000
                        });
                },
                focus: function (event, ui) {
                    $inputField.val(ui.item.Name);
                    $currentSelection = ui.item;
                    return false;
                },
                select: function (event, ui) {
                    var rowIndx = $inputField.prop('id');
                    updateTaskGLV(rowIndx,ui.item,'glv1');
                    return false;
                },
                change: function (event, ui) {
                    var rowIndx = $inputField.prop('id');
                    if($currentSelection != null)
                    {
                        updateTaskGLV(rowIndx,$currentSelection,'glv1');
                        $currentSelection = null;
                    }
                    return false;
                }
            });
        });

        $j('#tasks').on( "focus", "input.glv2AutoComplete", function( event ) {
            $currentSelection = null;
            $inputField = $j(this);
            $inputField.autocomplete({
                minLength: 0,
                autoFocus: false,
                source: function (request, response) {
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.gcProject_Ext.searchGLV}',
                         request.term, 'glv2',
                        function (result, event) {
                            if (event.status) {
                                $j.each(result,function(k,item){
                                    if(item.label == undefined)
                                        result[k].label = item.Name;
                                    if(item.value == undefined)
                                        result[k].value = item.Id;
                                })
                                response(result);
                            } else {
                                alert(event.message);
                            }
                        }, {
                            buffer: true,
                            escape: true,
                            timeout: 120000
                        });
                },
                focus: function (event, ui) {
                    $inputField.val(ui.item.Name);
                    $currentSelection = ui.item;
                    return false;
                },
                select: function (event, ui) {
                    var rowIndx = $inputField.prop('id');
                    updateTaskGLV(rowIndx,ui.item,'glv2');
                    return false;
                },
                change: function (event, ui) {
                    var rowIndx = $inputField.prop('id');
                    if($currentSelection != null)
                    {
                        updateTaskGLV(rowIndx,$currentSelection,'glv2');
                        $currentSelection = null;
                    }
                    return false;
                }
            });
        });

    });

    function updateTaskGLV(rowIndx,obj,glvType)
    {
        var $gridDiv = $j('#tasks');
        $gridDiv.pqGrid('showLoading');
        var rowData = $gridDiv.pqGrid( "getRowData", {rowIndx:rowIndx});

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.updateProjectTaskGLV}',
            rowData.idProjectTask, obj.Id, glvType,
            function(result,event)
            {
                if(event.status)
                {
                    refreshAll();
                }
                else
                {
                    refreshGrid_tasks();
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function updateMaterialTask(rowIndx,obj)
    {
        var $gridDiv = $j('#materials');
        $gridDiv.pqGrid('showLoading');
        var rowData = $gridDiv.pqGrid( "getRowData", {rowIndx:rowIndx});

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.updateMaterialProjectTask}',
            rowData.idMaterial, obj.Id,
            function(result,event)
            {
                if(event.status)
                {
                    refreshAll();
                }
                else
                {
                    refreshGrid_materials();
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }


</script>
</head>

<body>
<apex:variable value="{!AcctSeed__Project__c.Internal_Partner_Boat_Sale__c}" var="isInternalERP"/>
<apex:variable value="{!AcctSeed__Project__c.Internal_Labour_Service__c}" var="isInternalLabour"/>
<apex:variable value="{!AcctSeed__Project__c.Internal_Warranty__c}" var="isInternalWarranty"/>
<apex:variable value="{!AcctSeed__Project__c.Internal_Partner_Parts_Order__c}" var="isInternalPartsOrder"/>
<apex:variable value="{!AcctSeed__Project__c.GMBLASERP__Warehouse__c}" var="idERPWarehouse"/>
<div id="theAuraComp"></div>
    <apex:form >
        <apex:actionFunction name="rerenderDetail" reRender="detailContainer"/>
        <apex:actionFunction name="rerenderJournalEntry" reRender="relatedListJournalEntry"/>
        <apex:actionFunction name="rerenderInboundMovements" reRender="relatedListInboundMovements"/>
        <apex:actionFunction name="rerenderInventoryTransfers" reRender="relatedListInventoryTransfers"/>
        <apex:actionFunction name="rerenderOpportunityLineItems" reRender="relatedListOpportunityLineItems"/>
        <apex:actionFunction name="rerenderCashReceipts" reRender="relatedListCashReceipts"/>
        <apex:actionFunction name="rerenderBillings" reRender="relatedListBillings"/>
        <apex:actionFunction name="rerenderBillingLines" reRender="relatedListBillingLines"/>
        <apex:actionFunction name="rerenderAPLines" reRender="relatedListAPLines"/>
    </apex:form>

    <apex:outputPanel id="detailContainer">
        <apex:detail subject="{!AcctSeed__Project__c.Id}" relatedList="false" id="theDetail" oncomplete="detailOnComplete()" inlineEdit="false"/>
    </apex:outputPanel>



    <div id="pageBlockSerials">
        <apex:pageBlock mode="edit" title="Nested Serials (Motors, Trailers, etc.)">
            <apex:pageBlockButtons location="top" rendered="{!!isInternalWarranty}">
                <button type="button" class="btn" id="btnLaunchSearchSerial" onclick="launchSearchSerial();">Nest an Existing Motor, Trailer etc.</button>
                <button type="button" class="btn" id="btnLaunchCreateSerial" onclick="launchCreateNewSerial('0');">Create a New Motor, Trailer etc.</button>
                <button type="button" style="{!IF(isTradeIn,'display:none','')}" class="btn" id="btnAddToERPItes" onclick="addToERPOrderItems();">Add To ERP Order Items</button>
            </apex:pageBlockButtons>

            <div><div id="serials"></div></div>

        </apex:pageBlock>
    </div>

    <div id="pageBlockProjectTasks" style="{!IF(isCounterSale,'display:none','')}">
        <apex:pageBlock mode="edit" title="ERP Order Tasks">
            <apex:pageBlockButtons location="top">
                <apex:form >
                <span><strong>Select Task Name:</strong></span>
                <span id="newTaskName">
                    <apex:selectList styleClass="newTaskName" size="1">
                        <apex:selectOptions value="{!listDefaultTaskNames}"/>
                    </apex:selectList>
                </span>
                <button type="button" class="btn" id="btnNewProjectTask" onclick="launchNewProjectTask();">New ERP Order Task</button>
                </apex:form>
            </apex:pageBlockButtons>

            <div><div id="tasks"></div></div>

        </apex:pageBlock>
    </div>

    <div id="pageBlockMaterials">
        <apex:pageBlock mode="edit" title="ERP Order Items">
            <apex:pageBlockButtons location="top">
                <apex:outputText rendered="{!isInternalPartsOrder}">
                    <button type="button" class="btn" id="btnTransferSelected"  onclick="transferSelected();">Transfer (Selected)</button>
                    <apex:outputText rendered="{!$Permission.CanUnfillInternalPartsOrder}">
                        <button type="button" class="btn" id="btnUndoTransferSelected"  onclick="undoTransferSelected();">Undo Transfer (Selected)</button>
                    </apex:outputText>
                </apex:outputText>
                <apex:outputText rendered="{!AND(!isCounterSale,!isInternalLabour,!isInternalPartsOrder,!isInternalWarranty,$Permission.CanMoveInvToWIP)}">
                    <button type="button" class="btn" id="btnInvToWIPSelected"  onclick="consumeInventorySelected();">Inv <span style="font-size:larger;">&rarr;</span> WIP (Selected)</button>
                </apex:outputText>
                <apex:outputText rendered="{!AND(!isCounterSale,!isInternalLabour,!isInternalPartsOrder,!isInternalWarranty,$Permission.CanMoveWIPToInv)}">
                    <button type="button" class="btn" id="btnWIPToInvSelected"  onclick="unconsumeInventorySelected();">Inv <span style="font-size:larger;">&larr;</span> WIP (Selected)</button>
                </apex:outputText>
                <button type="button" class="btn" id="btnExpandMaterial"    onclick="expandGrid_materials();">Collapse</button>
                <button type="button" class="btn" id="btnNewMaterial"       onclick="launchNewMaterial();">New ERP Order Item</button>
                <apex:outputText rendered="{!!isInternalWarranty}">
                    <button type="button" class="btn" id="pickListPdfButton"    onclick="previewPDF_pickList();" >Pick List PDF</button>
                    <button type="button" style="{!IF(OR(isTradeIn,isCounterSale,isPartnerPartsOrder,isFixedAsset),'display:none','')}" class="btn" id="btnAddToERPItes" onclick="nestERPOrderItemSerials();">Nest ERP Order Items</button>
                </apex:outputText>
            </apex:pageBlockButtons>

            <div><div id="materials"></div></div>
        </apex:pageBlock>
    </div>

<apex:outputText rendered="{!isInternalPartsOrder}">
<div>
    <apex:outputPanel id="relatedListInventoryTransfers">
        <apex:relatedList subject="{!Id}" list="Inventory_Transfers__r"/>
    </apex:outputPanel>
</div>
</apex:outputText>
<div style="{!IF(OR(isManufacturing,isTradeIn,isInternalERP,isInternalPartsOrder),'','display:none')}">
    <apex:outputPanel id="relatedListInboundMovements">
        <apex:relatedList subject="{!Id}" list="AcctSeedERP__Inbound_Inventory_Movements__r" rendered="{!AND($ObjectType.AcctSeedERP__Inbound_Inventory_Movement__c.accessible,$ObjectType.AcctSeedERP__Inbound_Inventory_Movement__c.fields.AcctSeedERP__Project__c.accessible)}"/>
    </apex:outputPanel>
</div>

<div style="{!IF(!isInternalPartsOrder,'','display:none')}">
<div style="{!IF(OR(isBoatSale,isPartnerBoatSale,isCounterSale,isPartnerPartsOrder,isService,isWarranty),'','display:none')}">
    <div>
        <apex:outputPanel id="relatedListBillings">
            <apex:relatedList subject="{!Id}" list="GMBLASERP__Billings__r" rendered="{!AND($ObjectType.AcctSeed__Billing__c.accessible,$ObjectType.AcctSeed__Billing__c.fields.GMBLASERP__Project__c.accessible)}"/>
        </apex:outputPanel>
    </div>
    <div id="pageBlock_cash">
        <apex:outputPanel id="relatedListCashReceipts" rendered="{!AND(!isInternalERP,!isInternalLabour)}">
            <apex:relatedList subject="{!Id}" list="AcctSeed__Cash_Receipts__r" rendered="{!AND($ObjectType.AcctSeed__Cash_Receipt__c.accessible,$ObjectType.AcctSeed__Cash_Receipt__c.fields.AcctSeed__Project__c.accessible)}"/>
        </apex:outputPanel>
    </div>
    <div>
        <apex:outputPanel id="relatedListBillingLines">
            <apex:relatedList subject="{!Id}" list="AcctSeed__Billing_Lines__r" rendered="{!AND($ObjectType.AcctSeed__Billing_Line__c.accessible,$ObjectType.AcctSeed__Billing_Line__c.fields.AcctSeed__Project__c.accessible)}"/>
        </apex:outputPanel>
    </div>
    <apex:outputPanel id="relatedListOpportunityLineItems" rendered="false">
        <apex:outputPanel rendered="{!!ISBLANK(AcctSeed__Project__c.AcctSeed__Opportunity__c)}">
            <apex:relatedList subject="{!AcctSeed__Project__c.AcctSeed__Opportunity__c}" list="OpportunityLineItems" rendered="{!AND($ObjectType.OpportunityLineItem.accessible,$ObjectType.AcctSeed__Project__c.fields.AcctSeed__Opportunity__c.accessible)}"/>
        </apex:outputPanel>
    </apex:outputPanel>
</div>
<div style="{!IF(OR(!isCounterSale,AND(isCounterSale,AcctSeed__Project__c.AcctSeed__Account__c != null, AcctSeed__Project__c.AcctSeed__Account__r.RecordType.Name == 'Supplier')),'','display:none')}">
    <apex:outputPanel id="relatedListAPLines">
        <apex:relatedList subject="{!Id}" list="AcctSeed__Account_Payable_Lines__r" rendered="{!AND($ObjectType.AcctSeed__Account_Payable_Line__c.accessible,$ObjectType.AcctSeed__Account_Payable_Line__c.fields.AcctSeed__Project__c.accessible)}"/>
    </apex:outputPanel>
</div>
</div>
    <div id="pageBlockLedger">
        <apex:pageBlock mode="edit" title="Project Ledger" rendered="{!$ObjectType.AcctSeed__Transaction__c.accessible}">
            <apex:pageBlockButtons location="top" rendered="{!$ObjectType.AcctSeed__Journal_Entry__c.createable}">
                <apex:outputPanel rendered="{!isManufacturing}">
                    <apex:outputPanel >
                        <apex:outputText rendered="{!$Permission.CanMoveInvToWIP}">
                        <button type="button" class="btn" onclick="consumeInventory();">INV <span style="font-size:larger;">&rarr;</span> WIP</button>
                        </apex:outputText>
                        <apex:outputText rendered="{!$Permission.CanMoveWIPToInv}">
                        <button type="button" class="btn" onclick="unconsumeInventory();">INV <span style="font-size:larger;">&larr;</span> WIP</button>
                        </apex:outputText>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </apex:outputPanel>

                    <apex:outputPanel >
                        <apex:outputText rendered="{!$Permission.CanCreateWIPToFG}">
                        <button type="button" class="btn" onclick="buildFinishedGoods();">WIP <span style="font-size:larger;">&rarr;</span> FG</button>
                        </apex:outputText>
                        <apex:outputText rendered="{!$Permission.CanCreateFGToWIP}">
                        <button type="button" class="btn" onclick="unbuildFinishedGoods();">WIP <span style="font-size:larger;">&larr;</span> FG</button>
                        </apex:outputText>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </apex:outputPanel>
                    <apex:outputPanel >
                        <apex:outputText rendered="{!$Permission.CanMoveInvToWIPToFG}">
                        <button type="button" class="btn" onclick="postProject();">INV <span style="font-size:larger;">&rarr;</span> WIP <span style="font-size:larger;">&rarr;</span> FG</button>
                        </apex:outputText>
                        <apex:outputText rendered="{!$Permission.CanMoveFGToWIPToInv}">
                        <button type="button" class="btn" onclick="unpostProject();">INV <span style="font-size:larger;">&larr;</span> WIP <span style="font-size:larger;">&larr;</span> FG</button>
                        </apex:outputText>
                    </apex:outputPanel>
                    <apex:outputText rendered="{!AND($Permission.CanSelectBillCOGSDate,OR($Permission.CanCreateWIPToFG,$Permission.CanMoveInvToWIPToFG))}">
                    &nbsp;&nbsp;FG Date: <input type="text" class="dateSelector" name="cogsDate" id="cogsDate"/>
                    </apex:outputText>
                </apex:outputPanel>

                <apex:outputPanel rendered="{!AND(!isManufacturing,!isTradeIn,!isInternalPartsOrder,!isInternalWarranty)}">

                    <apex:outputPanel rendered="{!AND(!OR(isCounterSale,isFixedAsset),!isInternalERP,!isInternalLabour)}">
                        <apex:outputPanel >
                            <apex:outputText rendered="{!$Permission.CanMoveInvToWIP}">
                            <button type="button" class="btn" onclick="consumeInventory();">INV <span style="font-size:larger;">&rarr;</span> WIP</button>
                            </apex:outputText>
                            <apex:outputText rendered="{!$Permission.CanMoveWIPToInv}">
                            <button type="button" class="btn" onclick="unconsumeInventory();">INV <span style="font-size:larger;">&larr;</span> WIP</button>
                            </apex:outputText>
                            <!-- <apex:outputText rendered="{!AND($Permission.CanSelectBillCOGSDate,OR($Permission.CanMoveInvToWIP,$Permission.CanCreateInvToWIPToCOGS))}">
                            &nbsp;&nbsp;Move Date: <input type="text" class="dateSelector" name="moveDate" id="moveDate"/>
                            </apex:outputText>
                            &nbsp;&nbsp;&nbsp; -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        </apex:outputPanel>
                        <apex:outputPanel >
                            <apex:outputText rendered="{!$Permission.CanCreateWIPToCOGS}">
                            <button type="button" class="btn" onclick="takeExpense();">WIP <span style="font-size:larger;">&rarr;</span> COGS</button>
                            </apex:outputText>
                            <apex:outputText rendered="{!$Permission.CanCreateCOGSToWIP}">
                            <button type="button" class="btn" onclick="untakeExpense();">WIP <span style="font-size:larger;">&larr;</span> COGS</button>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            </apex:outputText>
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{!!isInternalLabour}">
                        <apex:outputText rendered="{!$Permission.CanCreateInvToWIPToCOGS}">
                        <button type="button" class="btn" onclick="postProject();">INV <span style="font-size:larger;">&rarr;</span> WIP <span style="font-size:larger;">&rarr;</span> COGS</button>
                        </apex:outputText>
                        <apex:outputText rendered="{!$Permission.CanCreateCOGSToWIPtoInv}">
                        <button type="button" class="btn" onclick="unpostProject();">INV <span style="font-size:larger;">&larr;</span> WIP <span style="font-size:larger;">&larr;</span> COGS</button>
                        </apex:outputText>
                        <apex:outputText rendered="{!AND($Permission.CanSelectBillCOGSDate,OR($Permission.CanCreateWIPToCOGS,$Permission.CanCreateInvToWIPToCOGS))}">
                        &nbsp;&nbsp;Move/COGS Date: <input type="text" class="dateSelector" name="cogsDate" id="cogsDate"/>
                        </apex:outputText>
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{!isInternalLabour}">
                        <apex:outputText rendered="{!$Permission.CanCreateInvToWIPToCOGS}">
                        <button type="button" class="btn" onclick="postProject();">Internal COGS</button>
                        </apex:outputText>
                        <apex:outputText rendered="{!$Permission.CanCreateCOGSToWIPtoInv}">
                        <button type="button" class="btn" onclick="unpostProject();">Undo Internal COGS</button>
                        </apex:outputText>
                        <apex:outputText rendered="{!AND($Permission.CanSelectBillCOGSDate,OR($Permission.CanCreateWIPToCOGS,$Permission.CanCreateInvToWIPToCOGS))}">
                        &nbsp;&nbsp;COGS Date: <input type="text" class="dateSelector" name="cogsDate" id="cogsDate"/>
                        </apex:outputText>
                    </apex:outputPanel>
                </apex:outputPanel>
                <apex:outputPanel rendered="{!isTradeIn}">
                    <button type="button" class="btn" onclick="createInboundMoves();">Create Inbound</button>
                    <button type="button" class="btn" onclick="unbuildFinishedGoods();">Delete Inbound</button>
                    <apex:outputText rendered="{!$Permission.CanCreateWIPToFG}">
                    <button type="button" class="btn" onclick="buildFinishedGoodsTradeIn();">WIP <span style="font-size:larger;">&rarr;</span> FG</button>
                    </apex:outputText>
                    <apex:outputText rendered="{!$Permission.CanCreateFGToWIP}">
                    <button type="button" class="btn" onclick="unbuildFinishedGoods();">WIP <span style="font-size:larger;">&larr;</span> FG</button>
                    </apex:outputText>
                </apex:outputPanel>
                <apex:outputPanel rendered="{!isInternalPartsOrder}">
                    <apex:outputText rendered="{!$Permission.CanCreateWIPToCOGS}">
                    <button type="button" class="btn" onclick="takeExpense();">WIP <span style="font-size:larger;">&rarr;</span> COGS</button>
                    </apex:outputText>
                    <apex:outputText rendered="{!$Permission.CanCreateCOGSToWIP}">
                    <button type="button" class="btn" onclick="untakeExpense();">WIP <span style="font-size:larger;">&larr;</span> COGS</button>
                    </apex:outputText>
                    <button type="button" class="btn" onclick="cosumeAndTransfer();">Transfer All ERP Items</button>
                    <apex:outputText rendered="{!$Permission.CanUnfillInternalPartsOrder}">
                        <button type="button" class="btn" onclick="undoTransfer();">Undo Transfer All ERP Items</button>
                    </apex:outputText>
                    Move Date: <input type="text" class="dateSelector" name="cogsDate" id="cogsDate"/>
                </apex:outputPanel>

            </apex:pageBlockButtons>

            <div>
                <div id="ledger"></div>
            </div>

        </apex:pageBlock>
    </div>
    <div id="journalBlock">
        <apex:outputPanel id="relatedListJournalEntry">
            <apex:relatedList subject="{!Id}" list="Journal_Entries__r" rendered="{!AND($ObjectType.AcctSeed__Journal_Entry__c.accessible,$ObjectType.AcctSeed__Journal_Entry__c.fields.Project__c.accessible)}"/>
        </apex:outputPanel>
    </div>
   <!--  <div id="pageBlockTimeCardLedger">
        <apex:pageBlock mode="edit" title="Time Card Ledger" rendered="{!OR(isManufacturing,isService,isWarranty)}">
            <div><div id="timeCardLedger"></div></div>
        </apex:pageBlock>
    </div>
    <div id="pageBlockTimeCards">
        <apex:outputPanel rendered="{!AND($ObjectType.AcctSeed__Time_Card__c.accessible,OR(isManufacturing,isService,isWarranty,isBoatSale,isPartnerBoatSale))}">
            <apex:form >
                <span><strong>Select Timecard period:</strong></span>
                <span id="timeCardPeriods">
                    <apex:selectList styleClass="periodSelector" size="1" onchange="refreshTimecardLines();">
                        <apex:selectOptions value="{!listTimecardPeriods}"/>
                    </apex:selectList>
                </span>
                &nbsp;
                <span><strong>Select Employee:</strong></span>
                <span id="timeCardEmployees">
                    <apex:selectList styleClass="employeeSelector" size="1" onchange="refreshTimecardLines();">
                        <apex:selectOptions value="{!listEmployees}"/>
                    </apex:selectList>
                </span>
                &nbsp;
                <span><label for="timeCardShowAll"><strong>Show all projects:</strong></label>
                    <input style="vertical-align: middle;" type="checkbox" name="timeCardShowAll" id="timeCardShowAll" value="yes" onclick="refreshTimecardLines();" />
                </span>
            </apex:form>
            <br />
            <br />
            <c:gcmpTimeCardLines_bulkEdit idTimeCardProject="{!Id}" rendered="{!IF($CurrentPage.parameters.bulkEdit='0',false,true)}"/>
        </apex:outputPanel>
    </div> -->
<apex:relatedList subject="{!Id}" list="CombinedAttachments"/>
<apex:relatedList subject="{!Id}" list="OpenActivities" />
<apex:relatedList subject="{!Id}" list="ActivityHistories" />
<apex:relatedList subject="{!Id}" list="ERP_DOCUMENTS__r" />


<div id="serial-number-form" style="display:none;">
    <div>
        <form name="createSerialForm" id="createSerialForm" onsubmit="return fn_saveSerial(this);">
            <table width="100%">
                <tr>
                    <td>Product:</td>
                    <td><input type="hidden" id="isNest" /><input type="hidden" id="selectProductId" /><input type="text" id="selectProduct" /></td>
                </tr>
                <tr>
                    <td>Lot:</td>
                    <td><input type="hidden" id="productIsLotTracked" /><input type="text" id="selectLot" /></td>
                </tr>
                <tr>
                    <td>Serial Number:</td>
                    <td><input type="text" id="serialNumber" /></td>
                </tr>
                <tr>
                    <td>Model Year:</td>
                    <td><input type="text" id="modelYear" /></td>
                </tr>
                <tr>
                    <td>Description:</td>
                    <td><textarea id="serialDescription" rows="5"></textarea></td>
                </tr>
            </table>
        </form>
    </div>
</div>
<apex:outputText rendered="{!!$Permission.CanSelectBillCOGSDate}">
    <input style="display: none;" type="text" class="dateSelector" name="cogsDate" id="cogsDate"/>
</apex:outputText>

</body>

<script type="text/javascript">
    ////////////// Time Card Related Functionality - START
    <apex:outputText rendered="{!AND($ObjectType.AcctSeed__Time_Card__c.accessible,OR(isManufacturing,isService,isWarranty,isBoatSale,isPartnerBoatSale))}">
    function refreshTimecardLines()
    {
        if($j('#timeCardShowAll').is(":checked"))
            idTimeCardProject = '';
        else
            idTimeCardProject = "{!Id}";

        var idEmployee = $j('#timeCardEmployees select').val();
        if(idEmployee == '') return;
        var employeeName = $j('#timeCardEmployees select option[value='+idEmployee+']').text();
        var idTCP = $j('#timeCardPeriods select').val();
        $j('#pageBlock_lines').find('.mainTitle').html('Time Card Lines for '+employeeName);
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.findOrCreateTimeCard}',
            idEmployee,idTCP,
            function(result,event){
                if(event.status){
                    if(result != '')
                    {
                        idTimeCard = result;
                        if($j('#timeCardLines').children().length == 0)
                            initComponent_timeCardLines();
                        else
                            refreshColumns();
                    }
                }
                else
                {
                    alert(event.message);
                }
            },
            {buffer:true, escape:true, timeout:120000});
    }
    </apex:outputText>
    ////////////// - END

    function previewPDF_pickList(){
        window.open('/apex/gpProject_PickList_PDF2?id={!Id}','_blank');
    }

    function detailOnComplete()
    {
        refreshAll();
        rerenderOpportunityLineItems();
    }

    function refreshAll()
    {
        refreshGrid_tasks();
        refreshGrid_materials();
        refreshGrid_ledger();
        refreshGrid_timeCardLedger();
        checkProjectHasSerial();
    }

    function appendEditLayout()
    {
        //add an "Edit Layout" link to the top of the page, for ease of editing the layout; will need to make the layout Id dynamic, when pushing to production, or remove this feature
        var $linkEditLayout = $j('<a class="configLinks" href="/layouteditor/layoutEditor.apexp?type=01Ii0000001yvHO&lid=00hi0000003BKV9&retURL=%2F{!Id}" target="_self">Edit Layout</a><span>&nbsp;|&nbsp;</span>');

        $j('div.bPageTitle div.ptBody div.links').prepend($linkEditLayout);

    }

    function initPaymentMethods()
    {
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveCashReceiptPaymentMethodOptions}',
            function(result,event){
                if(event.status)
                {
                    paymentMethods = result;
                }
                else
                {
                    alert(event.message);
                }
            },
            {buffer:true, escape:true, timeout:120000});
    }

//
//
//  NESTED SERIALS ******************************************************************
//
//

    function checkProjectHasSerial()
    {
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.checkProjectHasSerial}',
            '{!Id}',
            function(result,event){
                if(event.status)
                {
                    if(result == 'true' || result == true)
                    {
                        $j('#pageBlockSerials').show();
                        refreshGrid_serials();
                    }
                    else
                        $j('#pageBlockSerials').hide();
                }
                else
                {
                    alert(event.message);
                }
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function initGrid_serials()
    {
        var gridObj = { title:"",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:true,editable:false, minWidth:80},
                        dataModel:{data:[], sorting:'local', location:'local'},
                        dragColumns:{enabled:false},
                        editable:false,
                        editModel: {clicksToEdit:1, saveKey: jQuery.ui.keyCode.ENTER, keyUpDown: false, onSave:null, onBlur:'save'},
                        //editModel:{clicksToEdit:1, pressToEdit:false, filterKeys:true, keyUpDown:true, saveKey:$j.ui.keyCode.ENTER},
                        //filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:0,
                        freezeRows:0,
                        height:'flex',
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: false,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:false,
                        showTop:true,
                        showToolbar:false,
                        sortable:true,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:'action',               title:'Action',         align:'center'},
                          {dataIndx:'productRecordTypeName',title:'Record Type'},
                          {dataIndx:'productFamily',        title:'Product Family'},
                          {dataIndx:'productName',          title:'Product Name'},
                          {dataIndx:'productCode',          title:'Product Code'},
                          {dataIndx:'lotName',              title:'Lot'},
                          {dataIndx:'serialName',           title:'Serial Number'},
                          {dataIndx:'modelYear',            title:'Model Year'},
                          {dataIndx:'status',               title:'Location'},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        //gGrid.initFormat(gridObj.colModel);
        //gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'action')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';

                        var myHTML = '';

                        if({!$ObjectType.GMBLASERP__Serial_Number__c.accessible})
                            myHTML +=  '<a href=\"/'+ui.rowData.idSerial+'\" target=\"_top\">view</a>';

                        myHTML += '&nbsp;&nbsp;<span class="link" onclick="deNest(\''+ui.rowData.idSerial+'\','+ui.rowIndx+');">de-nest</span>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'productName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idProduct) return '';

                        var myHTML = ui.rowData.productName;

                        if({!$ObjectType.Product2.accessible})
                            return '<a href=\"/'+ui.rowData.idProduct+'\" target=\"_blank\">'+myHTML+'</a>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'productCode')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.productCode) return '';

                        var myHTML = ui.rowData.productCode;

                        if({!$ObjectType.Product2.accessible})
                            return '<a href=\"/'+ui.rowData.idProduct+'\" target=\"_blank\">'+myHTML+'</a>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'lotName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idLot) return '';

                        if({!$ObjectType.GMBLASERP__Lot__c.accessible})
                            return '<a href=\"/'+ui.rowData.idLot+'\" target=\"_blank\">'+ui.rowData.lotName+'</a>';
                        else
                            return ui.rowData.lotName;
                    }
                });
            }

            else if(col.dataIndx == 'serialName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idSerial) return '';

                        if({!$ObjectType.GMBLASERP__Serial_Number__c.accessible})
                            return '<a href=\"/'+ui.rowData.idSerial+'\" target=\"_blank\">'+ui.rowData.serialName+'</a>';
                        else
                            return ui.rowData.serialName;
                    }
                });
            }
            else if(col.dataIndx == 'status')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';
                        if(ui.rowData.warehouseName) return ui.rowData.warehouseName;
                        else return 'out';
                    }
                });
            }
        });

        var $gridDiv = $j('#serials');

        $gridDiv.pqGrid(gridObj);
    }

    function refreshGrid_serials(){

        var $gridDiv = $j('#serials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveNestedSerials}',
            '{!Id}',
            function(result,event){
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function deNest(idSerial, rowIndx)
    {
        var $gridDiv = $j('#serials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcSerialNumber_Ext.updateNest}',
            idSerial, null,
            function(result,event){
                if(event.status)
                {
                    refreshGrid_serials();
                    // $gridDiv.pqGrid( "deleteRow", {rowIndx: rowIndx} );
                    // $gridDiv.pqGrid( "removeData", {rowIndx: rowIndx} );
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function nest(idSerial, rowIndx)
    {
        var $gridDiv = $j('#serialSearchResults');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcSerialNumber_Ext.updateNest}',
            idSerial,'{!AcctSeed__Project__c.Serial_Number__c}',
            function(result,event){
                if(event.status)
                {
                    $gridDiv.pqGrid('deleteRow',{rowIndx:rowIndx});
                    $gridDiv.pqGrid('removeData',{rowIndx:rowIndx});
                    $gridDiv.pqGrid('addRow',{rowIndx:rowIndx, rowData:result, checkEditable:false, source:'add'});
                    refreshGrid_serials();
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function addToERPOrderItems()
    {
        var $gridDiv = $j('#serials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.addNestToERPItems}',
            '{!AcctSeed__Project__c.Id}',
            function(result,event)
            {
                if(event.status)
                {
                    refreshGrid_serials();
                    refreshAll();
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function nestERPOrderItemSerials()
    {
        var $gridDiv = $j('#materials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.nestERPOrderItemSerials}',
            '{!AcctSeed__Project__c.Id}',
            function(result,event)
            {
                if(event.status)
                {
                    refreshGrid_serials();
                    refreshAll();
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function launchSearchSerial()
    {
        var $dialogDiv = $j('<div style=\"z-index:100 !important;\"></div>');
        var $gridDiv = $j('<div id=\"serialSearchResults\"></div>');
        $dialogDiv.append($gridDiv);

        $dialogDiv.dialog({
            autoOpen: false,
            height: 285,
            width: '95%',
            modal: true,
            position:{my:'center top', at:'center top', of:'#serials'},
            close:function(){$gridDiv.pqGrid('destroy'); $gridDiv.remove(); $dialogDiv.dialog('destroy'); $dialogDiv.remove(); refreshGrid_serials();},
            open:function(){initGrid_searchSerial($gridDiv);},
            title: ''
        });

        $dialogDiv.dialog('open');
        $dialogDiv.parent().find('.ui-dialog-title').html('Search Serials:&nbsp;&nbsp;<input id=\"inputSearchSerial\" type=\"text\" length=\"20\" onkeyup=\"onKeyUpSearchSerial(event)\"/>&nbsp;<span style=\"font-weight:normal; font-size:smaller; font-style:italic\">enter a partial product name, product code, product family, or serial number, and then click [enter]</span>');
        $j('#inputSearchSerial').focus();
        $j('#inputSearchSerial').on('click',function(){$j(this).focus();});
    }

    function onKeyUpSearchSerial(e)
    {
        if (e.which == 13){
            searchSerial();
        }
    }

    function searchSerial()
    {
        var searchString = $j('#inputSearchSerial').val();
        if(searchString.trim().length > 0){
            refreshGrid_searchSerial(searchString);
        }
        else return;
    }

    function initGrid_searchSerial($gridDiv)
    {
        var gridObj = { title:"",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:true, minWidth:80},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:'up', sortIndx:'productName'},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:0,
                        freezeRows:0,
                        height:215,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:false},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:false,
                        showTop:true,
                        showToolbar:false,
                        sortable:true,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:'productRecordTypeName',title:'Record Type', gFilter:'text'},
                          {dataIndx:'productFamily',                title:'Product Family', gFilter:'text', maxWidth:150},
                          {dataIndx:'productName',                  title:'Product Name',   gFilter:'text'},
                          {dataIndx:'productCode',                  title:'Product Code',   gFilter:'text', maxWidth:150},
                          {dataIndx:'lotName',                      title:'Lot',            gFilter:'text'},
                          {dataIndx:'serialName',                   title:'Serial Number',  gFilter:'text'},
                          {dataIndx:'modelYear',                    title:'Model Year', maxWidth:75, minWidth:75},
                          {dataIndx:'nestName',                     title:'Current Nest',   gFilter:'text'},
                          {dataIndx:'warehouseName',                title:'Warehouse',      gFilter:'text'},
                          {dataIndx:'action',                       title:'Action',                 align:'center', maxWidth:120, sortable:false},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];


        //gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'serialName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idSerial) return '';

                        if({!$ObjectType.GMBLASERP__Serial_Number__c.accessible})
                            return '<a href=\"/'+ui.rowData.idSerial+'\" target=\"_blank\">'+ui.rowData.serialName+'</a>';
                        else
                            return ui.rowData.serialName;
                    }
                });
            }

            else if(col.dataIndx == 'nestName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idNest) return '';

                        if({!$ObjectType.GMBLASERP__Serial_Number__c.accessible})
                            return '<a href=\"/'+ui.rowData.idNest+'\" target=\"_blank\">'+ui.rowData.nestName+'</a>';
                        else
                            return ui.rowData.nestName;
                    }
                });
            }

            else if(col.dataIndx == 'action')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';
                        if(ui.rowData.idNest == '{!AcctSeed__Project__c.Serial_Number__c}') return 'nested here';
                        return '<button type="button" class="btn" onclick=\"nest(\''+ui.rowData.idSerial+'\','+ui.rowIndx+')\">Nest Here</button>';
                    }
                });
            }
        });

        $gridDiv.pqGrid(gridObj);
    }

    function refreshGrid_searchSerial(searchString){
        var $gridDiv = $j('#serialSearchResults');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcSerialNumber_Ext.searchSerial}',
            searchString,
            function(result,event)
            {
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }


//
//
//  PROJECT TASKS ******************************************************************
//
//

    function initGrid_tasks()
    {
        var gridObj = { title:"Project Tasks",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:true,editable:false, minWidth:50},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:'up', sortIndx:'projectTaskName'},
                        dragColumns:{enabled:false},
                        editable:true,
                        editModel: {clicksToEdit:1, saveKey: jQuery.ui.keyCode.ENTER, keyUpDown: false, onSave:null, onBlur:'save'},
                        //editModel:{clicksToEdit:1, pressToEdit:false, filterKeys:true, keyUpDown:true, saveKey:$j.ui.keyCode.ENTER},
                        //filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:0,
                        freezeRows:0,
                        height:250,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:false,
                        showTop:true,
                        showToolbar:false,
                        sortable:true,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:true};

        gridObj.colModel=[{dataIndx:'action',               title:'', maxWidth:100, align:'center'},
                          {dataIndx:'isLocked',             title:'Locked',    gFormat:'checkbox', align:'center', minWidth:45, maxWidth:45, hidden:{!!$Permission.CanLockUnlockERPTask}},
                          {dataIndx:'projectTaskName',      title:'ERP Order Task', minWidth:150},
                          {dataIndx:'taskGLV1',             title:'Task GLV1',        minWidth:150, hidden:{!!isInternalLabour}, editor:{ type: 'textbox', cls: 'glv1AutoComplete', select: true}, editable:true},
                          {dataIndx:'taskGLV2',             title:'Task GLV2',        minWidth:150, hidden:{!!isInternalLabour}, editor:{ type: 'textbox', cls: 'glv2AutoComplete', select: true}, editable:true},
                          {dataIndx:'productName',          title:'Parts List', hidden:{!IF(isManufacturing,false,true)}},
                          {dataIndx:'serviceDescription',   title:'Description'},
                          //{dataIndx:'budgetRevenue',      title:'Labor Charge',   align:'right',  gFormat:'money', maxWidth:110, gTotal:true, editable:true},
                          {dataIndx:'status',               title:'Status', maxWidth:50},
                          {dataIndx:'displayOnInvoice',     title:'On Invoice', gFormat:'checkbox', align:'center', maxWidth:75, hidden:{!IF(isManufacturing,true,false)}},
                          {dataIndx:'accounting',           title:'P & L', hidden:{!IF($Permission.CanViewProjectTaskAccounting,false,true)}},
                          {dataIndx:'actualRevenue',        title:'Actual&nbsp;<br/>Revenue',       align:'right',  gFormat:'money', maxWidth:110, gTotal:true, hidden:true},
                          {dataIndx:'actualExpense',        title:'Actual&nbsp;<br/>Expense',       align:'right',  gFormat:'money', maxWidth:110, gTotal:true, hidden:true},
                          {dataIndx:'actualProfit',         title:'Actual&nbsp;<br/>Profit',        align:'right',  gFormat:'money', maxWidth:110, gTotal:true, hidden:true},
                          {dataIndx:'actualProfitPct',      title:'Actual&nbsp;<br/>Profit %',      align:'right',  gFormat:'percent', maxWidth:110, hidden:true},
                          //{dataIndx:'complaint',            title:'Complaint'},
                          //{dataIndx:'cause',                title:'Cause'},
                          //{dataIndx:'correction',           title:'Correction'},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15,sortable:false}];

        gGrid.initFormat(gridObj.colModel);
        //gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'action')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';
                        var myHTML = '';
                        if({!$ObjectType.AcctSeed__Project_Task__c.updateable})
                        {
                            if(currentTheme == 'Theme4d')
                                myHTML += '';//'<span class="link" onclick="createLighteningNavigation(\''+ui.rowData.idProjectTask+'\',\'edit\');">edit</span>';
                            else
                                myHTML += '<a href=\"/'+ ui.rowData.idProjectTask+'/e?retURL=%2F{!Id}\" target=\"_self\">edit</a>';
                        }
                        myHTML += '&nbsp;&nbsp;<span class="link" onclick="deleteTask('+ui.rowIndx+',\''+ui.rowData.idProjectTask+'\');">del</span>';
                        if({!$Permission.CanLockUnlockERPTask})
                        {
                            var locVal = 'Unlock';
                            if(ui.rowData.isLocked == 'false') locVal = 'Lock';
                            myHTML += '&nbsp;&nbsp;<span class="link" onclick="lockUnlockTask('+ui.rowIndx+',\''+ui.rowData.idProjectTask+'\');">'+locVal+'</span>';
                        }
                        return myHTML;
                    }
                });
            }
            else if(col.dataIndx == 'projectTaskName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal || !ui.rowData.idProjectTask) return;
                        if({!$ObjectType.AcctSeed__Project_Task__c.accessible})
                            return '<a href=\"/'+ ui.rowData.idProjectTask+'\" target=\"_blank\">'+ui.rowData.projectTaskName+'</a>';
                        return ui.rowData.projectTaskName;
                    }
                });
            }
            else if(col.dataIndx == 'productName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';
                        if(!ui.rowData.idProduct) return '<button onclick=\"launchNewPartsList(\''+ui.rowData.idProjectTask+'\');\">select</button>';
                        if({!$ObjectType.Product2.accessible}){
                            var htm = '<a href=\"/'+ ui.rowData.idProduct+'\" target=\"_blank\">'+ui.rowData.productName+'</a>';
                            if(ui.rowData.partListGenerated == 'false')
                                htm += '&nbsp;&nbsp;<button onclick=\"generatePartsList(\''+ui.rowData.idProjectTask+'\');\">Generate Parts List</button>';
                            return htm;
                        }
                        return ui.rowData.productName;
                    }
                });
            }
            else if(col.dataIndx == 'serviceDescription')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';
                        var linkCls = 'link';
                        if(ui.rowData.isLocked == 'true')
                            linkCls = '';

                        var myHTML = '';
                        myHTML += '<span class="'+linkCls+'">complaint:&nbsp;&nbsp;</span>';
                        if(ui.rowData.complaint)
                            myHTML += ui.rowData.complaint;
                        myHTML += '<br/>';
                        myHTML += '<span class="'+linkCls+'">cause:&nbsp;&nbsp;</span>';
                        if(ui.rowData.cause)
                            myHTML += ui.rowData.cause;
                        myHTML += '<br/>';
                        myHTML += '<span class="'+linkCls+'">correction:&nbsp;&nbsp;</span>';
                        if(ui.rowData.correction)
                            myHTML += ui.rowData.correction;

                        return myHTML;
                    }
                });
            }
            else if(col.dataIndx == 'accounting')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        var myHTML = '';

                        myHTML += '<table>';
                        myHTML += '<tr>';
                        myHTML += '<td>revenue:&nbsp;&nbsp;<td>';
                        myHTML += '<td class="right">'+accounting.formatMoney(ui.rowData.actualRevenue)+'</td>';
                        myHTML += '</tr>';

                        myHTML += '<tr>';
                        myHTML += '<td>expense:&nbsp;&nbsp;<td>';
                        myHTML += '<td class="right">'+accounting.formatMoney(ui.rowData.actualExpense)+'</td>';
                        myHTML += '</tr>';

                        myHTML += '<tr>';
                        myHTML += '<td>profit:&nbsp;&nbsp;<td>';
                        myHTML += '<td class="right">'+accounting.formatMoney(ui.rowData.actualProfit)+'</td>';
                        myHTML += '</tr>';

                        myHTML += '</table>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'budgetRevenue')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(!ui.rowData.idProjectTask && !ui.rowData.isTotal) return '';
                        if(ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.budgetRevenue);
                        //if(ui.rowData.hasAPLines == 'true' || ui.rowData.poStatus != 'Open') return accounting.formatMoney(ui.rowData.unitPrice);
                        return '<span class="link">'+accounting.formatMoney(ui.rowData.budgetRevenue)+'</span>';
                    }
                });
            }
            else if(col.dataIndx == 'budgetExpense')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(!ui.rowData.idProjectTask && !ui.rowData.isTotal) return '';
                        if(ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.budgetExpense);
                        //if(ui.rowData.hasAPLines == 'true' || ui.rowData.poStatus != 'Open') return accounting.formatMoney(ui.rowData.unitPrice);
                        return '<span class="link">'+accounting.formatMoney(ui.rowData.budgetExpense)+'</span>';
                    }
                });
            }
            else if(col.dataIndx == 'budgetProfit')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(!ui.rowData.idProjectTask && !ui.rowData.isTotal) return '';
                        else return accounting.formatMoney(ui.rowData.budgetProfit);
                    }
                });
            }
            else if(col.dataIndx == 'budgetProfitPct')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(!ui.rowData.idProjectTask && !ui.rowData.isTotal) return '';

                        if(!ui.rowData.isTotal)
                            return (parseFloat(ui.rowData.budgetProfitPct)).toFixed(1) +' %';

                        var profitPct = +0;
                        var revenue = ui.rowData.budgetRevenue;
                        var profit = ui.rowData.budgetProfit;

                        if(parseFloat(revenue) != 0)
                            profitPct = 100 * profit/revenue;
                        return profitPct.toFixed(1)+' %';
                    }
                });
            }
            else if(col.dataIndx == 'actualProfitPct')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(!ui.rowData.isTotal)
                            return (parseFloat(ui.rowData.actualProfitPct)).toFixed(1) +' %';

                        var profitPct = +0;
                        var revenue = ui.rowData.actualRevenue;
                        var profit = ui.rowData.actualProfit;

                        if(parseFloat(revenue) != 0)
                            profitPct = 100 * profit/revenue;
                        return profitPct.toFixed(1)+' %';
                    }
                });
            }
        });

        var $gridDiv = $j('#tasks');

        $gridDiv.pqGrid(gridObj);

        $gridDiv.on('pqgridrefresh', function(event, ui){
            gGrid.refreshTotal($j(this),ui.pageData);
        });

        $gridDiv.on( "pqgridcellclick", function( event, ui ){
            if(ui.dataIndx == 'serviceDescription'){
                if(ui.rowData.isLocked == 'false')
                    changeDescription(ui.rowData);
            }
        });

        $gridDiv.on('pqgrideditorbegin', function(event,ui)
        {
            //allow cell edits of quantity, if there are no AP lines
            if(ui.rowData.isTotal || !ui.rowData.idProjectTask)
            {
                $j(this).pqGrid( "quitEditMode" );
            }
            if(ui.dataIndx == 'budgetRevenue' || ui.dataIndx == 'budgetExpense')
            {
                //ok
            }
            else if(ui.dataIndx == 'taskGLV1' || ui.dataIndx == 'taskGLV2')
            {
                if(ui.rowData.canchangeGLV == 'true')
                    ui.$editor.prop('id',ui.rowIndx);
                else
                    $j(this).pqGrid( "quitEditMode" );
            }
            else
            {
                //quit editing of cell
                $j(this).pqGrid( "quitEditMode" );
            }
        });

        $gridDiv.on('pqgridchange', function(event, ui)
        {
            var row = ui.rowList[0];

            //only respond to grid changes that have all of the following attributes
            if(row.type == 'update' &&
               ui.source != 'xyz' &&
               ui.rowList &&
               ui.rowList.length == 1 &&
               row.newRow)
            {
                var newRow = row.newRow;
                var oldRow = row.oldRow;
                var rowData = row.rowData;
                var idProjectTask = row.rowData.idProjectTask;
                var rowIndx = row.rowIndx;

                if(newRow.budgetRevenue !== undefined && newRow.budgetRevenue != oldRow.budgetRevenue)
                {
                    if(newRow.budgetRevenue == null || !isNaN(newRow.budgetRevenue))
                        updateBudgetRevenue(rowIndx, idProjectTask, newRow.budgetRevenue);
                    else
                    {
                        alert('The Budget Revenue must be numerical.');
                        rowData.budgetRevenue = oldRow.budgetRevenue;
                    }
                }
                if(newRow.budgetExpense !== undefined && newRow.budgetExpense != oldRow.budgetExpense)
                {
                    if(newRow.budgetExpense == null || !isNaN(newRow.budgetExpense))
                        updateBudgetExpense(rowIndx, idProjectTask, newRow.budgetExpense);
                    else
                    {
                        alert('The Budget Expense must be numerical.');
                        rowData.budgetExpense = oldRow.budgetExpense;
                    }
                }
            }
        });

        //select the contents of the input text box, when edit commences
        $gridDiv.on( "focus", "input,textarea,div[contenteditable=true]",  function(evt){
             $j(this).select();
        });
    }

    function refreshGrid_tasks(){
        var $gridDiv = $j('#tasks');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveTasks}',
            '{!Id}',
            function(result,event){
                if(event.status)
                {
                    console.log(result);
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function changeDescription(rowData)
    {
        var $dialogDiv = $j('<div id=\"dialogDivTaskCCC\" style=\"z-index:100 !important;\"></div>');

        var myHTML = '';
        myHTML += '<div>';
        myHTML += '<table style="margin:0 auto;">';
        myHTML +=   '<tr>';
        myHTML +=       '<th style=\"text-align:center\" class=\"complaint\">Complaint:</th>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\" class=\"complaint\">';
        myHTML +=           '<textarea class="complaintText" rows="4" cols="50">'+(rowData.complaint != undefined ? rowData.complaint : '')+'</textarea>';
        myHTML +=       '</td>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr>';
        myHTML +=       '<th style=\"text-align:center\" class=\"cause\">Cause:</th>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\" class=\"cause\">';
        myHTML +=           '<textarea class="causeText" rows="4" cols="50">'+(rowData.cause != undefined ? rowData.cause : '')+'</textarea>';
        myHTML +=       '</td>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr>';
        myHTML +=       '<th style=\"text-align:center\" class=\"correction\">Correction:</th>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\" class=\"correction\">';
        myHTML +=           '<textarea class="correctionText" rows="4" cols="50">'+(rowData.correction != undefined ? rowData.correction : '')+'</textarea>';
        myHTML +=       '</td>';
        myHTML +=   '</tr>';
        myHTML += '</table>';
        myHTML += '</div><br/>';

        $dialogDiv.append($j(myHTML));
        $dialogDiv.dialog({
            autoOpen: false,
            // height: 170,
            width: '50%',
            modal: true,
            // position:{my:'center top', at:'center top', of:'#thePageBlock'},
            close:function(){$dialogDiv.dialog('destroy'); $dialogDiv.remove();},
            title: 'Task Complaint/Cause/Correction',
            buttons: [
                        {
                          text: "Save",
                          click: function(){saveTaskCCC($dialogDiv,rowData.idProjectTask);}
                        }
                     ]
        });

        $dialogDiv.dialog('open');

        // $j('#selectWarehouse').focus();
    }

    function generatePartsList(idProjectTask)
    {
        gSpinner.show();
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.generatePartsList}',
            idProjectTask,
            function(result,event)
            {
                if(event.status)
                {
                    refreshGrid_tasks();
                    refreshGrid_materials();
                }
                else
                {
                    alert(event.message);
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        $dialogDiv.dialog('close');
    }

    function saveTaskCCC($dialogDiv,idProjectTask)
    {
        var complaintText = $dialogDiv.find('textarea.complaintText').val();
        var causeText = $dialogDiv.find('textarea.causeText').val();
        var correctionText = $dialogDiv.find('textarea.correctionText').val();
        gSpinner.show();
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.saveTaskCCC}',
            '{!Id}',idProjectTask, complaintText, causeText, correctionText,
            function(result,event)
            {
                if(event.status)
                {
                    refreshGrid_tasks();
                }
                else
                {
                    alert(event.message);
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        $dialogDiv.dialog('close');
    }

    function deleteTask(rowIndx, idTask)
    {
        if(!idTask) return;
        if(!confirm("Are you sure you want to delete this task?"))
            return;

        var $gridDiv = $j('#tasks');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.deleteTask}',
            idTask,
            function(result,event){
                if(event.status)
                {
                    //$gridDiv.pqGrid('deleteRow',{rowIndx:rowIndx});
                    //$gridDiv.pqGrid('removeData',{rowIndx:rowIndx});
                    //if(result.length > 0)// && (result[0].idProduct || result[0].idProjectTask))
                    //$gridDiv.pqGrid('addRow',{rowIndx:rowIndx, rowData:result[0], checkEditable:false, source:'add'});
                    refreshAll();
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                rerenderDetail();
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function lockUnlockTask(rowIndx, idProjectTask)
    {
        var $gridDiv = $j('#tasks');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.updateTaskLock}',
            idProjectTask,
            function(result,event){
                if(event.status)
                {
                    refreshAll();
                }
                else
                {
                    alert(event.message);
                    //refreshAll();
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function flagMaterial(rowIndx, idMaterial)
    {
        var $gridDiv = $j('#materials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.updateMaterialFlag}',
            idMaterial,
            function(result,event){
                if(event.status)
                {
                    refreshAll();
                }
                else
                {
                    alert(event.message);
                    //refreshAll();
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function updateBudgetRevenue(rowIndx, idProjectTask, amount)
    {
        var $gridDiv = $j('#tasks');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.updateBudgetRevenue}',
            idProjectTask, amount,
            function(result,event){
                if(event.status)
                {
                    $gridDiv.pqGrid('deleteRow',{rowIndx:rowIndx});
                    $gridDiv.pqGrid('removeData',{rowIndx:rowIndx});
                    $gridDiv.pqGrid('addRow',{rowIndx:rowIndx, rowData:result, checkEditable:false, source:'add'});
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function updateBudgetExpense(rowIndx, idProjectTask, amount)
    {
        var $gridDiv = $j('#tasks');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.updateBudgetExpense}',
            idProjectTask, amount,
            function(result,event){
                if(event.status)
                {
                    $gridDiv.pqGrid('deleteRow',{rowIndx:rowIndx});
                    $gridDiv.pqGrid('removeData',{rowIndx:rowIndx});
                    $gridDiv.pqGrid('addRow',{rowIndx:rowIndx, rowData:result, checkEditable:false, source:'add'});
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function launchNewProjectTask()
    {
        var taskName = $j("#newTaskName select").val();
        if(taskName == '')
            taskName = prompt('Enter a name for the new Project Task.');

        if(taskName == null) return;

        var $gridDiv = $j('#tasks');

        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.createTask}',
            '{!Id}',taskName,
            function(result,event)
            {
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }


    function launchNewPartsList(idProjectTask)
    {
        var $dialogDiv = $j('<div style=\"z-index:100 !important;\"></div>');
        var $gridDiv = $j('<div id=\"bomSearchResults\"></div>');
        $dialogDiv.append($gridDiv);
        $dialogDiv.data('idProjectTask',idProjectTask);

        $dialogDiv.dialog({
            autoOpen: false,
            height: 270,
            width: '95%',
            modal: true,
            position:{my:'center top', at:'center top', of:'#pageBlockProjectTasks'},
            close:function(){$gridDiv.pqGrid('destroy'); $gridDiv.remove(); $dialogDiv.dialog('destroy'); $dialogDiv.remove(); refreshAll();},
            open:function(){initGrid_searchBom($gridDiv);},
            title: 'Select Parts List for Project Task'
        });

        $dialogDiv.dialog('open');
        $j('#inputSearchString').focus();
    }


    function initGrid_searchBom($gridDiv)
    {
        var gridObj = { title:"",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:true, minWidth:80},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:'up', sortIndx:'productName'},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:0,
                        freezeRows:0,
                        height:250,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:false},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:false,
                        sortable:false,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.title = "";
        gridObj.title += "Search Products:&nbsp;&nbsp;<input id=\"inputSearchString\" type=\"text\" length=\"20\" onkeyup=\"onKeyUpSearchBom(event)\"/>";
        gridObj.title += "&nbsp;<span style=\"font-weight:normal; font-size:smaller; font-style:italic\">enter a partial product name, product code, product family, or vendor name and then click [enter]</span>";

        gridObj.colModel=[{dataIndx:'action',                       title:'Action',         align:'center', maxWidth:120, sortable:false},
                          {dataIndx:'productRecordTypeName',        title:'Record Type',    gFilter:'text'},
                          {dataIndx:'productFamily',                title:'Product Family', gFilter:'text', maxWidth:150},
                          {dataIndx:'productName',                  title:'Product Name',   gFilter:'text'},
                          {dataIndx:'productCode',                  title:'Product Code',   gFilter:'text', maxWidth:150},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];


        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'action')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        var idProjectTask = $gridDiv.parent().data('idProjectTask');
                        if(ui.rowData.alreadyIncluded == 'true') return 'already included';
                        return '<button type="button" class="btn" onclick=\"selectBom(\''+ui.rowData.idProduct+'\',\''+idProjectTask+'\')\">Select</button>';
                    }
                });
            }
        });

        $gridDiv.pqGrid(gridObj);
        //initSelectProjectTask();
    }

    function onKeyUpSearchBom(e)
    {
        if (e.which == 13){
            searchBom();
        }
    }

    function searchBom()
    {
        var searchString = $j('#inputSearchString').val();

        if(searchString.trim().length > 0){
            refreshGrid_searchBom(searchString);
        }
        else
        {
            gGrid.refreshGrid_callback($j('#bomSearchResults'),[]);
        }
        return;
    }

    function refreshGrid_searchBom(searchString){

        var $gridDiv = $j('#bomSearchResults');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.searchBom}',
            '{!Id}',searchString,
            function(result,event)
            {
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function selectBom(idProduct,idProjectTask)
    {
        console.log('select bom idProduct: '+idProduct);
        console.log('select bom idProjectTask: '+idProjectTask);

        //$j('#bomSearchResults').parent().
        var $gridDiv = $j('#tasks');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.selectBom}',
            idProduct,idProjectTask,
            function(result,event)
            {
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
        $j('#bomSearchResults').parent().dialog('close');

    }

//
//
//  MATERIALS AND EXPENSES ******************************************************************
//
//

    function initGrid_materials()
    {
        var gridObj = { title:"Materials and Expenses",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:true,editable:false, minWidth:80},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:'up', sortIndx:'productName'},
                        dragColumns:{enabled:false},
                        editable:true,
                        editModel: {clicksToEdit:1, saveKey: jQuery.ui.keyCode.ENTER, keyUpDown: {!isPartnerPartsOrder}, onSave:null, onBlur:'save'},
                        filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:6,
                        freezeRows:0,
                        height: 'flex',
                        historyModel:{on:false},
                        hoverMode:null,
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        // scrollModel: {autoFit:true},
                        scrollModel: {pace:'fast', autoFit:false, horizontal:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:false,
                        showTop:true,
                        showToolbar:false,
                        sortable:true,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:'action',               title:'Action', align:'center', maxWidth:110, minWidth:110},
                          {dataIndx:"selector",             title: "", minWidth:40, maxWidth:40, align: "center", cb:{header: false, all: false},   type: 'checkBoxSelection', resizable: false, sortable: false, editable: false, hidden: true},
                          {dataIndx:"isFlaggedYN",          title: "{!if(isWarranty,'Credit Only','Pre<br/>Installed')}", minWidth:60, maxWidth:60, align: "center"},
                          {dataIndx:"isSCR",                title: "Credit Requested", minWidth:60, maxWidth:60, align: "center", hidden: {!!isWarranty}},
                          {dataIndx:"isPrepaid",            title:'Prepaid', gFormat:'checkbox', minWidth:60, maxWidth:60, align: "center", hidden: {!isWarranty}},
                          {dataIndx:"selectorStat",         title: "Inv/WIP", minWidth:40, maxWidth:40, align: "center", resizable: false, sortable: false, editable: false, hidden: {!isCounterSale}},
                          {dataIndx:'projectTaskName',      title:'ERP Order Task',        gFilter:'select', minWidth:150, hidden:{!isCounterSale}, editor:{ type: 'textbox', cls: 'taskAutoComplete', select: true}, editable:true},
                          {dataIndx:'productName',          title:'Product',               gFilter:'text', minWidth:150},
                          {dataIndx:'productCode',          title:'Product Code',          gFilter:'text', minWidth:150},
                          {dataIndx:'productIsInventory',   title:'Inventory<br/>Product', gFormat:'checkbox',gFilter:'select', maxWidth:80},
                          {dataIndx:'productIsLotTracked',  title:'Lot<br/>Tracked',       gFormat:'checkbox',gFilter:'select', maxWidth:80, hidden:true},
                          {dataIndx:'productIsSerialized',  title:'Serialized',            gFormat:'checkbox',gFilter:'select', maxWidth:80, hidden:true},
                          {dataIndx:'lot',                  title:'Lot', maxWidth:80},
                          {dataIndx:'serial',               title:'Serial<br/>Number'},
                          {dataIndx:'serialLocation',       title:'Location', maxWidth:80, hidden:true},
                          {dataIndx:'qtyPO',                title:'PO<br/>rec\'d / ord\'d', align:'center', maxWidth:80, hidden:true},
                          {dataIndx:'qtySpecified',         title:'Qty<br/>Ordered',  gFormat:'number',   align:'center', maxWidth:80, editable:true, gTotal:true},
                          {dataIndx:'qtyMoved',             title:'Qty<br/>Filled',  gFormat:'number',   align:'center', maxWidth:80, editable:true, gTotal:true, hidden:{!isInternalLabour}},
                          {dataIndx:'qtyToMove',         title:'Qty Pick',  gFormat:'number',   align:'center', maxWidth:80, editable:true, gTotal:true, cls:'highlight', hidden:{!OR(isInternalLabour,isCounterSale)}},
                          {dataIndx:'qtySpecifiedOverride', title:'Qty Spec\'d<br/>Overridden', gFormat:'checkbox', align:'center', maxWidth:80, hidden:true},
                          {dataIndx:'unitPrice',            title:'Unit&nbsp;<br/>Price',   dataType:'float',   gFormat:'money',    align:'center', maxWidth:80, editable:{!$Permission.CanModifyERPOrderItemUnitPrice}, hidden:{!isManufacturing}},
                          {dataIndx:'priceOverride',        title:'Price<br/>Override', gFormat:'checkbox', align:'center',minWidth:60, maxWidth:60, hidden:{!isManufacturing}},
                          {dataIndx:'totalPrice',           title:'Total&nbsp;<br/>Price',  dataType:'float',   gFormat:'money',    align:'center', maxWidth:80, gTotal:true},
                          {dataIndx:'taxableFederal',       title:'Fed<br/>Tax',    gFormat:'checkbox', align:'center', minWidth:40, maxWidth:40},
                          {dataIndx:'taxableProvincial',    title:'Prov<br/>Tax',   gFormat:'checkbox', align:'center', minWidth:40, maxWidth:40},
                          {dataIndx:'taxableRetail',    title:'Retail<br/>Tax', gFormat:'checkbox', align:'center', minWidth:40, maxWidth:40},
                          {dataIndx:'inventory',            title:'Taken From<br/>Inventory',   align:'center',  maxWidth:110, gTotal:true},
                          {dataIndx:'finished',             title:'Placed In<br/>Finished Goods',   align:'center',  maxWidth:110, gTotal:true, hidden:{!!isManufacturing}},
                          {dataIndx:'expense',              title:'Posted<br/>Expense', align:'center',  maxWidth:110, gTotal:true, hidden:{!IF($Permission.CanViewProjectTaskAccounting,false,true)}},
                          {dataIndx:'wip',                  title:'WIP',    align:'center',  maxWidth:110, gTotal:true, hidden:true},
                          {dataIndx:'qtyOrdered',           title:'PO Qty<br/>Ordered', gTotal:true, hidden:true},
                          {dataIndx:'qtyReceived',          title:'PO Qty<br/>Received',gTotal:true, hidden:true},
                          {dataIndx:'qtyAllocated',         title:'qtyAllocated',       gTotal:true, hidden:true},
                          {dataIndx:'qtyExpense',           title:'qtyExpense',         gTotal:true, hidden:true},
                          {dataIndx:'qtyWip',               title:'qtyWip',             gTotal:true, hidden:true},
                          {dataIndx:'qtyFinished',          title:'qtyFinished',        gTotal:true, hidden:true},

                          {dataIndx:'amtSpecified',         title:'amtSpecified',       gTotal:true, hidden:true},
                          {dataIndx:'amtOrdered',           title:'amtOrdered',         gTotal:true, hidden:true},
                          {dataIndx:'amtReceived',          title:'amtReceived',        gTotal:true, hidden:true},
                          {dataIndx:'amtAllocated',         title:'amtAllocated',       gTotal:true, hidden:true},
                          {dataIndx:'amtExpense',           title:'amtExpense',         gTotal:true, hidden:true},
                          {dataIndx:'amtWip',               title:'amtWip',             gTotal:true, hidden:true},
                          {dataIndx:'amtFinished',          title:'amtFinished',        gTotal:true, hidden:true},
                          {dataIndx:'idMaterial',hidden:true}/*,
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}*/];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'action')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal || !ui.rowData.idMaterial) return '';
                        var myHTML = '';
                        if({!$ObjectType.AcctSeedERP__Material__c.updateable})
                        {
                            if(currentTheme == 'Theme4d')
                                myHTML += '';//<span class="link" onclick="createLighteningNavigation(\''+ui.rowData.idMaterial+'\',\'edit\');">edit</span>';
                            else
                                myHTML += '<a href=\"/'+ ui.rowData.idMaterial+'/e?retURL=%2F{!Id}\" target=\"_self\">edit</a>';
                        }
                        if({!$ObjectType.AcctSeedERP__Material__c.accessible})
                        {
                            if(currentTheme == 'Theme4d')
                                myHTML += '&nbsp;&nbsp;<span class="link" onclick="createLighteningNavigation(\''+ui.rowData.idMaterial+'\',\'view\');">view</span>';
                            else
                                myHTML += '&nbsp;&nbsp;<a href=\"/'+ ui.rowData.idMaterial+'\" target=\"_blank\">view</a>';
                        }
                        // if({!!isTaggedRetailERP} || ({!isTaggedRetailERP} && ui.rowData.productIsSerialized == 'false'))
                        if(ui.rowData.cannotModifySerialized == "false")
                        if(ui.rowData.hasMoves == 'false' && parseFloat(ui.rowData.qtyMoved) == 0)
                            myHTML += '&nbsp;&nbsp;<span class="link" onclick="deleteMaterial('+ui.rowIndx+',\''+ui.rowData.idMaterial+'\');">del</span>';
                        return myHTML;
                    }
                });
            }
            else if(col.dataIndx == 'isFlaggedYN')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        var myHTML = '';
                        if({!isPartnerBoatSale} || {!isBoatSale} || {!isWarranty}){
                            if(ui.rowData.productIsInventory == 'true' && ui.rowData.productIsSerialized == 'false' && ui.rowData.mfgMoves == 'false' && parseFloat(ui.rowData.qtyMoved) == 0){
                                if({!isPartnerBoatSale} && ui.rowData.productIsInventory == 'true' && ui.rowData.productIsSerialized == 'true'){
                                    // Do Nothing
                                }else{
                                    var check = '';
                                    if(ui.rowData.isFlagged == 'true')
                                        check = 'checked="checked"';
                                    var disabled = "";
                                    if({!isWarranty})
                                        disabled = " disabled = 'disabled' ";
                                    myHTML += '<input '+disabled+' type="checkbox" value="'+ui.rowIndx+'" onclick="checkedFlagged(this)" '+check+'/>';
                                }
                            }
                        }
                        return myHTML;
                    }
                });
            }
            else if(col.dataIndx == 'isPrepaid')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        var myHTML = '';
                        if(ui.rowData.isPrepayable == 'true'){
                            var check;
                            var disabled = " disabled = 'disabled' ";
                            if(ui.rowData.isPrepaid == 'true')
                                check = 'checked="checked"';
                            myHTML += '<input '+disabled+' type="checkbox" value="'+ui.rowIndx+'" onclick="checkedFlagged(this)" '+check+'/>';
                        }
                        return myHTML;
                    }
                });
            }
            else if(col.dataIndx == 'selector')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        // if(ui.rowData.isTotal || ui.rowData.productIsInventory == 'false' || ui.rowData.lineHasCOGS == 'true') return '';
                        if({!isInternalERP} && ui.rowData.productIsInventory == 'true' && ui.rowData.productIsSerialized == 'true') return '';
                        if(ui.rowData.isTotal || ui.rowData.productIsInventory == 'false' || ui.rowData.isFlagged == 'true') return '';
                    }
                });
            }
            else if(col.dataIndx == 'selectorStat')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';
                        if(ui.rowData.productIsInventory == 'false') return '';
                        if(ui.rowData.mfgMoves == 'true' && parseFloat(ui.rowData.qtySpecified) == parseFloat(ui.rowData.qtyAllocated)) return 'WIP';
                        else if(ui.rowData.productIsInventory == 'true' && {!isPartnerPartsOrder} && parseFloat(ui.rowData.qtySpecified) == parseFloat(ui.rowData.qtyMoved)) return 'Mov';
                        else if(ui.rowData.productIsInventory == 'true' && {!isPartnerPartsOrder} && parseFloat(ui.rowData.qtyMoved) != 0) return 'PM';
                        else if(ui.rowData.productIsInventory == 'true') return 'Inv';
                    }
                });
            }/*
            else if(col.dataIndx == 'projectTaskName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal || !ui.rowData.idProjectTask) return;
                        if({!$ObjectType.AcctSeed__Project_Task__c.accessible})
                            return '<a href=\"/'+ ui.rowData.idProjectTask+'\" target=\"_blank\">'+ui.rowData.projectTaskName+'</a>';
                        return ui.rowData.projectTaskName;
                    }
                });
            }*/
            else if(col.dataIndx == 'productName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal || !ui.rowData.idProduct) return;
                        var html = ui.rowData.productName;
                        if({!$ObjectType.Product2.accessible})
                            html = '<a href=\"/'+ ui.rowData.idProduct+'\" target=\"_blank\">'+ui.rowData.productName+'</a>';

                        if(ui.rowData.mtrlComment != undefined)
                            html += '<br />'+ui.rowData.mtrlComment;

                        return html;
                    }
                });
            }
            else if(col.dataIndx == 'lot')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';
                        if(!ui.rowData.idLot)
                        {
                            if(ui.rowData.productIsSerialized == 'true')
                                return 'serialized';
                            if(ui.rowData.idProduct && ui.rowData.productIsLotTracked == 'true')
                                return '<button type="button" cls="btn">select</button>';
                            else
                                return 'n/a';
                        }
                        if({!$ObjectType.GMBLASERP__Lot__c.accessible})
                            return '<a href=\"/'+ ui.rowData.idLot+'\" target=\"_blank\">'+ui.rowData.lotName+'</a>';
                        return ui.rowData.lotName;
                    }
                });
            }

            else if(col.dataIndx == 'serial')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';

                        var myHTML = '';
                        if(ui.rowData.idSerial)
                        {
                            if({!$ObjectType.GMBLASERP__Serial_Number__c.accessible})
                                 myHTML += '<a href=\"/'+ ui.rowData.idSerial+'\" target=\"_blank\">'+ui.rowData.serialName+'</a>';
                            else myHTML += ui.rowData.serialName;

                            myHTML += '&nbsp;&nbsp;&nbsp;';
                        }

                        if(ui.rowData.cannotModifySerialized == "false")
                        if(ui.rowData.idProduct && ui.rowData.productIsSerialized == 'true')
                        {
                            if(ui.rowData.hasMoves != 'true' && parseFloat(ui.rowData.qtyMoved) == 0)
                                myHTML += (ui.rowData.idSerial ? '<br />' : '') + '<button type="button" cls="btn" onclick="launchSearchSerialForMaterial(\''+ui.rowData.idMaterial+'\',\''+ui.rowIndx+'\')">'+(ui.rowData.idSerial ? 'change' : 'select')+'</button>';
                                if(ui.rowData.idSerial && ui.rowData.hasMoves != 'true' && parseFloat(ui.rowData.qtyMoved) == 0)
                                    myHTML += (ui.rowData.idSerial ? '<br />' : '') + '<button type="button" cls="btn" onclick="selectSerialForMaterial(\''+ui.rowData.idMaterial+'\',null,\''+ui.rowIndx+'\',false)">Clear</button>';
                        }

                        if(!ui.rowData.idProduct || ui.rowData.productIsSerialized != 'true')
                            myHTML += 'n/a';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'qtyPO')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        //if(ui.rowData.isTotal) return '';
                        return accounting.formatNumber(ui.rowData.qtyReceived)+'&nbsp;/&nbsp;'+accounting.formatNumber(ui.rowData.qtyOrdered);
                    }
                });
            }
            else if(col.dataIndx == 'qtySpecified')
            {
                if({!isCounterSale})
                {
                    col.title='Qty&nbsp;<br/>Ordered';
                }

                $j.extend(col,{
                    render:function(ui)
                    {
                        var htm = '';
                        if(ui.rowData.qtySpecified)
                        {
                            var val = parseFloat(ui.rowData.qtySpecified);
                            htm = accounting.formatNumber(ui.rowData.qtySpecified);
                            if(Math.floor(val) != val) htm = accounting.toFixed(ui.rowData.qtySpecified,2);
                        }
                        if(ui.rowData.isTotal) return htm;
                        if(ui.rowData.lineHasCOGS == 'true') return htm;
                        if(!ui.rowData.idMaterial) return '';
                        return '<span class=\"link\">'+ htm + '</span>';
                    }
                });
            }
            else if(col.dataIndx == 'qtyToMove')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        var htm = '';
                        if(ui.rowData.qtyToMove)
                        {
                            var val = parseFloat(ui.rowData.qtyToMove);
                            htm = accounting.formatNumber(ui.rowData.qtyToMove);
                            if(Math.floor(val) != val) htm = accounting.toFixed(ui.rowData.qtyToMove,2);
                        }
                        if(ui.rowData.isTotal) return htm;
                        // if(ui.rowData.lineHasCOGS == 'true') return htm;
                        if(!ui.rowData.idMaterial) return '';
                        if(ui.rowData.productIsInventory == 'false' || ui.rowData.isFlagged == 'true') return '';
                        if( {!isInternalERP} && ui.rowData.productIsSerialized == 'true')  return '';
                        if(ui.rowData.cannotModifySerialized == "true") return '';
                        return '<span class=\"link\">'+ htm + '</span>';
                    }
                });
            }
            else if(col.dataIndx == 'qtyAllocated')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal)
                            return accounting.formatNumber(ui.rowData.qtyAllocated);
                        if(ui.rowData.qtyAllocated && ui.rowData.qtyAllocated != 0)
                            return accounting.formatNumber(ui.rowData.qtyAllocated);
                        return '';
                    }
                });
            }
            else if(col.dataIndx == 'inventory')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.amtAllocated);
                        if(parseFloat(ui.rowData.amtAllocated) == 0 && parseFloat(ui.rowData.qtyAllocated) == 0) return '';
                        return accounting.formatMoney(ui.rowData.amtAllocated)+'<br/>'+accounting.formatNumber(ui.rowData.qtyAllocated);
                    }
                });
            }
            else if(col.dataIndx == 'finished')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.amtFinished);
                        if(parseFloat(ui.rowData.amtFinished) == 0 && parseFloat(ui.rowData.qtyFinished) == 0) return '';
                        return accounting.formatMoney(ui.rowData.amtFinished)+'<br/>'+accounting.formatNumber(ui.rowData.qtyFinished);
                    }
                });
            }
            else if(col.dataIndx == 'unitPrice')
            {
                col.align='center';
                col.halign='center';
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal || !ui.rowData.idMaterial) return '';
                        if({!$Permission.CanModifyERPOrderItemUnitPrice})
                            if(ui.rowData.lineHasCOGS == 'true')
                                return accounting.formatMoney(ui.rowData.unitPrice);
                            else
                                return '<span class="link">'+accounting.formatMoney(ui.rowData.unitPrice)+'</span>';
                        else
                            return accounting.formatMoney(ui.rowData.unitPrice);
                    }
                });
            }
            else if(col.dataIndx == 'totalPrice')
            {
                col.align='center';
                col.halign='center';
            }


            else if(col.dataIndx == 'wip')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.amtWip);
                        return accounting.formatMoney(ui.rowData.amtWip)+'<br/>'+accounting.formatNumber(ui.rowData.qtyWip);
                    }
                });
            }
            else if(col.dataIndx == 'expense')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return accounting.formatMoney(ui.rowData.amtExpense);
                        if(parseFloat(ui.rowData.amtExpense) == 0 && parseFloat(ui.rowData.qtyExpense) == 0) return '';
                        return accounting.formatMoney(ui.rowData.amtExpense)+'<br/>'+accounting.formatNumber(ui.rowData.qtyExpense);
                    }
                });
            }
        });

        var $gridDiv = $j('#materials');

        $gridDiv.pqGrid(gridObj);

        $gridDiv.on('pqgridrefresh', function(event, ui){
            gGrid.refreshTotal($j(this),ui.pageData);
        });

        $gridDiv.on('pqgrideditorbegin', function(event,ui)
        {
            //allow cell edits of quantity, if there are no AP lines
            if(ui.rowData.isTotal || !ui.rowData.idMaterial)
            {
                $j(this).pqGrid( "quitEditMode" );
            }
            if(ui.dataIndx == 'qtySpecified' || ui.dataIndx == 'qtyToMove' || ui.dataIndx == 'unitPrice' || ui.dataIndx == 'projectTaskName')
            {
                if(ui.rowData.lineHasCOGS == 'true' && ui.dataIndx != 'qtyToMove')
                    $j(this).pqGrid( "quitEditMode" );
                if(ui.dataIndx == 'projectTaskName'){
                    if(ui.rowData.mfgMoves == 'true')
                        $j(this).pqGrid( "quitEditMode" );
                    else
                        ui.$editor.prop('id',ui.rowIndx);
                }
                else if(ui.dataIndx == 'qtyToMove' && (ui.rowData.productIsInventory == 'false' || ( {!isInternalERP} && ui.rowData.productIsSerialized == 'true') || ui.rowData.isFlagged == 'true' || ui.rowData.cannotModifySerialized == "true"))
                    $j(this).pqGrid( "quitEditMode" );
            }
            else
            {
                //quit editing of cell
                $j(this).pqGrid( "quitEditMode" );
            }
        });

        $gridDiv.on('pqgridchange', function(event, ui)
        {
            var row = ui.rowList[0];

            //only respond to grid changes that have all of the following attributes
            if(row.type == 'update' &&
               ui.source != 'xyz' &&
               ui.rowList &&
               ui.rowList.length == 1 &&
               row.newRow)
            {
                var newRow = row.newRow;
                var oldRow = row.oldRow;
                var rowData = row.rowData;
                var idMaterial = rowData.idMaterial;
                var idProduct = rowData.idProduct;
                var idProjectTask = rowData.idProjectTask;
                var rowIndx = row.rowIndx;

                if(!idProjectTask) idProjectTask = null;

                if(newRow.qtySpecified !== undefined && newRow.qtySpecified != oldRow.qtySpecified)
                {
                    if(newRow.qtySpecified == null || !isNaN(newRow.qtySpecified))
                        updateQtySpecified(rowIndx, idMaterial, newRow.qtySpecified);
                    else
                    {
                        alert('The Quantity Specified must be numerical.');
                        rowData.qtySpecified = oldRow.qtySpecified;
                    }
                }

                else if(newRow.qtyToMove !== undefined && newRow.qtyToMove != oldRow.qtyToMove)
                {
                    if(newRow.qtyToMove == null || isNaN(newRow.qtyToMove))
                    {
                        alert('The Quantity To Move must be numerical.');
                        rowData.qtyToMove = oldRow.qtyToMove;
                    }else if(parseFloat(rowData.qtyCanBeMoved) < parseFloat(newRow.qtyToMove)){
                        alert('Quantity to Move cannot be more than quantity left to move.');
                        rowData.qtyToMove = oldRow.qtyToMove;
                    }
                    else if(newRow.qtyToMove == 0){
                        $gridDiv.pqGrid( "selection", {type:'row', method: 'remove',rowIndx:rowIndx} );
                        $td = $gridDiv.pqGrid( "getCell", { rowIndx: rowIndx, dataIndx: "selector" } );
                        $td.find('input').prop('checked',false);
                        rowData.selector = false;
                    }
                    else{
                        $gridDiv.pqGrid( "setSelection", {rowIndx:rowIndx} );
                        $td = $gridDiv.pqGrid( "getCell", { rowIndx: rowIndx, dataIndx: "selector" } );
                        $td.find('input').prop('checked',true);
                        rowData.selector = true;
                    }
                }

                else if(newRow.unitPrice !== undefined && newRow.unitPrice != oldRow.unitPrice)
                {
                    if(newRow.unitPrice == null || !isNaN(newRow.unitPrice))
                        updateUnitPrice(rowIndx, idMaterial, newRow.unitPrice);
                    else
                    {
                        alert('The Unit Price must be numerical.');
                        rowData.unitPrice = oldRow.unitPrice;
                    }
                }
            }
        });

        //select the contents of the input text box, when edit commences
        $gridDiv.on( "focus", "input,textarea,div[contenteditable=true]",  function(evt){
             $j(this).select();
        });
    }

    function refreshGrid_materials(){
        var $gridDiv = $j('#materials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveMaterials}',
            '{!Id}',null,
            function(result,event){
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function checkedFlagged(obj) {
        var indx = $j(obj).val();
        var rowData = $j('#materials').pqGrid('getRowData',{rowIndx:indx});
        // if($j(obj).is(":checked"))
        var idMaterial = rowData.idMaterial;
        flagMaterial(indx, idMaterial);
    }

    function deleteMaterial(rowIndx, idMaterial)
    {
        if(!idMaterial) return;

        var $gridDiv = $j('#materials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.deleteMaterial}',
            idMaterial,
            function(result,event){
                if(event.status)
                {
                    //$gridDiv.pqGrid('deleteRow',{rowIndx:rowIndx});
                    //$gridDiv.pqGrid('removeData',{rowIndx:rowIndx});
                    //if(result.length > 0)// && (result[0].idProduct || result[0].idProjectTask))
                    //$gridDiv.pqGrid('addRow',{rowIndx:rowIndx, rowData:result[0], checkEditable:false, source:'add'});
                    refreshAll();
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                rerenderDetail();
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function updateQtySpecified(rowIndx, idMaterial, qtyNew)
    {
        var $gridDiv = $j('#materials');
        $gridDiv.pqGrid('showLoading');

        if(qtyNew != null && qtyNew.trim() == '')
           qtyNew = null;

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.updateQtySpecified}',
            idMaterial, qtyNew,
            function(result,event){
                if(event.status)
                {
                    //$j.extend($gridDiv.pqGrid('getRowData',{rowIndx:rowIndx}),result);
                    //$gridDiv.pqGrid('refresh');
                    refreshAll();
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                rerenderDetail();
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function updateUnitPrice(rowIndx, idMatl, unitPrice)
    {
        var $gridDiv = $j('#materials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.updateUnitPrice}',
            idMatl, unitPrice,
            function(result,event){
                if(event.status)
                {
                    //$j.extend($gridDiv.pqGrid('getRowData',{rowIndx:rowIndx}),result);
                    //$gridDiv.pqGrid('refresh');
                    refreshAll();
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                rerenderDetail();
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function expandGrid_materials()
    {
        var $gridDiv = $j('#materials');
        var height = $gridDiv.pqGrid( "option", "height" );

        if(height == 'flex')
        {
            $gridDiv.pqGrid( "option", "height",250);
            $j('#btnExpandMaterial').html('Expand');
        }
        else
        {
            $gridDiv.pqGrid( "option", "height",'flex');
            $j('#btnExpandMaterial').html('Collapse');
        }

        $gridDiv.pqGrid('refresh');

    }

    function launchSearchSerialForMaterial(idMaterial, rowIndx)
    {
        var $dialogDiv = $j('<div style=\"z-index:100 !important;\"></div>');
        var $gridDiv = $j('<div id=\"searchSerialForMaterial\"></div>');
        $dialogDiv.append($gridDiv);
        $dialogDiv.data('idMaterial',idMaterial);
        $dialogDiv.data('rowIndx',rowIndx);


        $dialogDiv.dialog({
            autoOpen: false,
            height: 310,
            width: 500,
            modal: true,
            position:{my:'center top', at:'center top', of:'#pageBlockMaterials'},
            close:function(){$gridDiv.pqGrid('destroy'); $gridDiv.remove(); $dialogDiv.dialog('destroy'); $dialogDiv.remove(); refreshAll();},
            open:function(){initGrid_searchSerialForMaterial($gridDiv); refreshGrid_searchSerialForMaterial(idMaterial);},
            title: 'Select Serial Number'
        });

        $dialogDiv.dialog('open');
    }

    function initGrid_searchSerialForMaterial($gridDiv)
    {
        var gridObj = { title:"Select Serial Number for ERP Order Item",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:false, minWidth:80, align:'center'},
                        //dataModel:{data:[], sorting:'local', location:'local', sortDir:'up', sortIndx:'serialName'},
                        dataModel:{data:[]},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:0,
                        freezeRows:0,
                        height:250,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:false},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:false,
                        showTop:true,
                        showToolbar:false,
                        sortable:false,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:'warehouseName',    title:'Warehouse',  gFilter:'select'},
                          {dataIndx:'locationName',     title:'Location',   gFilter:'select', hidden:true},
                          {dataIndx:'lotName',          title:'Lot',        gFilter:'text'},
                          {dataIndx:'serialName',       title:'Serial',     gFilter:'text'},
                          {dataIndx:'modelYear',        title:'Year',       gFilter:'text'},
                          {dataIndx:'action'}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);


        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'action')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        var idMaterial = $gridDiv.parent().data('idMaterial');
                        var rowIndx = $gridDiv.parent().data('rowIndx');
                        var rowData = $j('#materials').pqGrid( "getRowData", {rowIndx:rowIndx});
                        if(rowData.idSerial == ui.rowData.idSerial) return 'Already Selected';
                        // if(ui.rowData.IsAvailable == 'false' && {!$Permission.CanTagUnavailableSerial})
                        //     return '<button type="button" class="btn" onclick=\"selectSerialForMaterial(\''+idMaterial+'\',\''+ui.rowData.idSerial+'\',\''+rowIndx+'\',true)\">Not Available</button>';
                        console.log('{!idWarehouseInternal}');
                        console.log('{!idERPWarehouse}');
                        console.log(ui.rowData.idWarehouse);
                        if('{!idWarehouseInternal}' != '{!idERPWarehouse}' && ui.rowData.idWarehouse == '{!idWarehouseInternal}')
                             return '';
                        return '<button type="button" class="btn" onclick=\"selectSerialForMaterial(\''+idMaterial+'\',\''+ui.rowData.idSerial+'\',\''+rowIndx+'\',false)\">Select</button>';
                    }
                });
            }
            else if(col.dataIndx == 'serialName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idSerial) return '';

                        if({!$ObjectType.GMBLASERP__Serial_Number__c.accessible})
                            return '<a href=\"/'+ui.rowData.idSerial+'\" target=\"_blank\">'+ui.rowData.serialName+'</a>';
                        else
                            return ui.rowData.serialName;
                    }
                });
            }
        });

        $gridDiv.pqGrid(gridObj);
    }

    function refreshGrid_searchSerialForMaterial(idMaterial){

        var $gridDiv = $j('#searchSerialForMaterial');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.searchSerialForMaterial}',
            idMaterial,
            function(result,event)
            {
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                    refreshGrid_serials();
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function selectSerialForMaterial(idMaterial,idSerial,rowIndx,warning)
    {
        if(warning)
        {
            if(!confirm("You are about to tag a serial number that is shown as Not Available. This serial number might be attached to some other ERP Order which is marked as completed. Please make sure you understand the consequences. Do you want to proceed?"))
                return;
        }
        var $gridDiv = $j('#materials');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.selectSerialForMaterial}',
            idMaterial,idSerial,
            function(result,event)
            {
                if(event.status)
                {
                    if(idSerial == null)
                        refreshGrid_materials();
                    else{
                        $j.extend($gridDiv.pqGrid('getRowData',{rowIndx:rowIndx}),result);
                        $gridDiv.pqGrid('refresh');
                    }
                    rerenderDetail();
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
        $j('#searchSerialForMaterial').parent().dialog('close');
    }



    function launchNewMaterial()
    {
        var $dialogDiv = $j('<div style=\"z-index:100 !important;\"></div>');
        var $gridDiv = $j('<div id=\"productSearchResults\"></div>');
        $dialogDiv.append($gridDiv);

        $dialogDiv.dialog({
            autoOpen: false,
            height: 300,
            width: '95%',
            modal: true,
            position:{my:'center top', at:'center top', of:'#pageBlockMaterials'},
            close:function(){$gridDiv.pqGrid('destroy'); $gridDiv.remove(); $dialogDiv.dialog('destroy'); $dialogDiv.remove(); refreshAll();},
            open:function(){initGrid_searchProduct($gridDiv);},
            title: 'New ERP Order Item'
        });

        $dialogDiv.dialog('open');
        $j('#inputSearchString').focus();
    }

    function initGrid_searchProduct($gridDiv)
    {
        var gridObj = { title:"Search Products:&nbsp;&nbsp;<input id=\"inputSearchString\" type=\"text\" length=\"20\" onkeyup=\"onKeyUpSearch(event)\"/>&nbsp;<span style=\"font-weight:normal; font-size:smaller; font-style:italic\">enter a partial product name, product code, product family, or vendor name and then click [enter]</span>",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:true, minWidth:80, editable:false},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:'up', sortIndx:'productName'},
                        dragColumns:{enabled:false},
                        editable:true,
                        editModel: {clicksToEdit:1, saveKey: jQuery.ui.keyCode.ENTER, keyUpDown: false, onSave:null, onBlur:'save'},
                        filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:0,
                        freezeRows:0,
                        height:250,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:false},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:false,
                        sortable:false,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.title = "";
        gridObj.title += "Select Task:&nbsp;&nbsp;<select id=\"selectProjectTask\"></select>";
        gridObj.title += "&nbsp;&nbsp;Search Products:&nbsp;&nbsp;<input id=\"inputSearchString\" type=\"text\" length=\"20\" onkeyup=\"onKeyUpSearch(event)\"/>";
        gridObj.title += "&nbsp;<span style=\"font-weight:normal; font-size:smaller; font-style:italic\">enter a partial product name, product code, product family, or vendor name and then click [enter]</span>";

        gridObj.colModel=[{dataIndx:'productRecordTypeName',        title:'Record Type',    gFilter:'text'},
                          {dataIndx:'productFamily',                title:'Product Family', gFilter:'text', maxWidth:150},
                          {dataIndx:'productName',                  title:'Product Name',   gFilter:'text'},
                          {dataIndx:'productCode',                  title:'Product Code',   gFilter:'text', maxWidth:150},
                          {dataIndx:'vendorName',                   title:'Default Vendor', gFilter:'text', maxWidth:150},
                          {dataIndx:'isInventory',                  title:'Is Inventory<br/>Product',   gFormat:'checkbox', gFilter:'select', maxWidth:100},
                          {dataIndx:'qtyInvThisWhs',                title:'Inventory<br/>This Whs',      dataType:'float',   gFormat:'number', maxWidth:100},
                          {dataIndx:'qtyInvOtherWhs',               title:'Inventory<br/>Other Whs',     dataType:'float',   gFormat:'number', maxWidth:100},
                          {dataIndx:'action',                       title:'<i><small>(click to edit qty)</small></i>',    editable:true,             align:'center', maxWidth:120, sortable:false},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];


        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'action')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        //if(ui.rowData.alreadyIncluded == 'true') return 'already included';
                        // return '<button type="button" class="btn" onclick=\"addMaterial(\''+ui.rowData.idProduct+'\','+ui.rowIndx+')\">'+(ui.rowData.alreadyIncluded == 'true' ? 'Add Again' : 'Add Material')+'</button>';
                        return '<button type="button" class="btn">'+(ui.rowData.alreadyIncluded == 'true' ? 'Add Again' : 'Add Material')+'</button>';
                    }
                });
            }
        });

        $gridDiv.pqGrid(gridObj);

        $gridDiv.on('pqgridchange', function(event, ui)
        {
            var row = ui.rowList[0];

            //only respond to grid changes that have all of the following attributes
            if(row.type == 'update' &&
               ui.source != 'xyz' &&
               ui.rowList &&
               ui.rowList.length == 1 &&
               row.newRow)
            {
                var newRow = row.newRow;
                var oldRow = row.oldRow;
                var rowData = row.rowData;
                var idProduct = row.rowData.idProduct;
                var rowIndx = row.rowIndx;

                if(newRow.action !== undefined && newRow.action != oldRow.action)
                {
                    if(!isNaN(newRow.action) && newRow.action != '')
                    {
                        addMaterial(idProduct, rowIndx, newRow.action);
                        rowData.action = '';
                    }
                    else if(isNaN(newRow.action))
                    {
                        alert('The Quantity must be numerical.');
                    }
                }
                //ok to continue
            }
        });

        initSelectProjectTask();
    }

    function initSelectProjectTask()
    {
        var $select = $j('#selectProjectTask');
        $select.change(function(){searchProduct();});

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveProjectTaskPicklistValues}',
            '{!Id}',
            function(result,event)
            {
                if(event.status)
                {

                    $select.children().remove();
                    $j.each(result,function(i,opt){
                        var $option = $j('<option>').attr('value',opt.value).html(opt.label);
                        $select.append($option);
                        if(opt.defaultSelection == 'true')
                            $select.val(opt.value);
                    });
                }
                else
                {
                    alert(event.message);
                }
            },
            {buffer:true, escape:true, timeout:120000});

    }

    function refreshGrid_searchProduct(searchString){

        var idProjectTask = $j('#selectProjectTask').val();
        if(!idProjectTask)
        {
            alert('Select an ERP Order Task, before searching Products.');
            return;
        }

        var $gridDiv = $j('#productSearchResults');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.searchProduct}',
            '{!Id}',idProjectTask,searchString,
            function(result,event)
            {
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function onKeyUpSearch(e)
    {
        if (e.which == 13){
            searchProduct();
        }
    }

    function searchProduct()
    {
        var searchString = $j('#inputSearchString').val();

        if(searchString.trim().length > 0){
            refreshGrid_searchProduct(searchString);
        }
        else
        {
            gGrid.refreshGrid_callback($j('#productSearchResults'),[]);
        }
        return;
    }

    function addMaterial(idProduct, rowIndx, qty)
    {
        var idProjectTask = $j('#selectProjectTask').val();
        if(!idProjectTask)
        {
            alert('Select an ERP Order Task, before selecting a Product.');
            return;
        }

        var $gridDiv = $j('#productSearchResults');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.createMatl}',
            '{!Id}',idProjectTask, idProduct, qty,
            function(result,event)
            {
                if(event.status)
                {
                    $gridDiv.pqGrid( "getRowData", {rowIndx:rowIndx}).alreadyIncluded='true';
                    $gridDiv.pqGrid("refreshRow",{rowIndx:rowIndx});
                    refreshGrid_materials();
                }
                else
                {
                    alert(event.message);
                }
                rerenderDetail();
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }


    function postProject()
    {
        launchWarehouseSelection('build');
        // postProject_breakDown();
        // consumeInventory_breakDown();
    }

    function postProject_breakDown(idWarehouse)
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');
        var movementDate = null;
        if($j("#cogsDate").length) movementDate = $j("#cogsDate").val();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.createWipRA}',
            '{!Id}', idWarehouse, movementDate,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                        refreshAll();
                        rerenderDetail();
                        rerenderJournalEntry();
                        rerenderInboundMovements();
                    }else if({!isManufacturing})
                        buildFinishedGoods();
                    else
                        takeExpense();

                }
                else
                {
                    refreshAll();
                    rerenderDetail();
                    rerenderJournalEntry();
                    rerenderInboundMovements();
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function postProject_bk()
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.postProjectRA}',
            '{!Id}',
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function unpostProject()
    {
        launchWarehouseSelection('unpost');
    }

    function unpostProject_breakDown(idWarehouse)
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.unpostProjectRA}',
            '{!Id}', idWarehouse,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function consumeInventory()
    {
        launchWarehouseSelection('consume');
        // consumeInventory_breakDown();
    }

    function consumeInventory_breakDown(idWarehouse)
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');
        var movementDate = null;
        if($j("#cogsDate").length) movementDate = $j("#cogsDate").val();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.createWipRA}',
            '{!Id}',idWarehouse,movementDate,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function consumeInventorySelected()
    {
        launchWarehouseSelection('selected');
    }

    function consumeInventorySelected_breakDown(idWarehouse)
    {
        $materialsGrid = $j('#materials');
        var listIdMatrl = [];

        var rows = $materialsGrid.pqGrid('selection', { type: 'row', method: 'getSelection' });

        jQuery.each(rows, function(i,row)
        {
            /*if({!isInternalERP} && row.rowData.productIsSerialized == 'false'){
                var qtyLeft = parseFloat(row.rowData.qtySpecified) - parseFloat(row.rowData.qtyMoved);
                if(qtyLeft != 0){
                    row.rowData.qtyToMove = qtyLeft;
                    listIdMatrl.push(row.rowData);
                }
            }
            else */if(parseFloat(row.rowData.qtyToMove) != 0)
                listIdMatrl.push(row.rowData);
        });

        if(listIdMatrl.length == 0)
        {
            alert('Select materials and put Quantity to fill.');
            return;
        }

        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');
        var movementDate = null;
        if($j("#cogsDate").length) movementDate = $j("#cogsDate").val();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.createWipRASelected}',
            '{!Id}',idWarehouse, listIdMatrl,movementDate,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function unconsumeInventory()
    {
        launchWarehouseSelection('unconsume');
    }

    function unconsumeInventory_breakDown(idWarehouse)
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.undoWipRA}',
            '{!Id}', idWarehouse,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function unconsumeInventorySelected()
    {
        launchWarehouseSelection('unconsumeSelected');
    }

    function unconsumeInventorySelected_breakDown(idWarehouse)
    {
        $materialsGrid = $j('#materials');
        var listIdMatrl = [];

        var rows = $materialsGrid.pqGrid('selection', { type: 'row', method: 'getSelection' });

        jQuery.each(rows, function(i,row)
        {
            listIdMatrl.push(row.rowData.idMaterial);
        });

        if(listIdMatrl.length == 0)
        {
            alert('Select materials to reverse WIP.');
            return;
        }
        gSpinner.show();
        var $gridDiv = $j('#ledger');

        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.undoWipRASelected}',
            '{!Id}', listIdMatrl, idWarehouse,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function buildFinishedGoodsTradeIn()
    {
        buildFinishedGoodsForTradeIn(0);
        return;
        var $dialogDiv = $j('<div id=\"dialogDivReceiveAllInventory\" style=\"z-index:100 !important;\"></div>');

        var myHTML = '';
        myHTML += '<div>';
        myHTML += '<table style="margin:0 auto;">';
        myHTML +=   '<tr>';
        myHTML +=       '<th style=\"text-align:center\" class=\"TradeAmount\">TradeIn Amount</th>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\" class=\"TradeAmount\">';
        myHTML +=           '<input type=\"text\" id=\"inputTradeInAmount\"/>';
        myHTML +=       '</td>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\"><br/><button type=\"button\" id="btnTradeIn" tabindex=0>Create Finished Good</button></td>';
        myHTML +=   '</tr>';
        myHTML += '</table>';
        myHTML += '</div><br/>';

        $dialogDiv.append($j(myHTML));
        $dialogDiv.find('button#btnTradeIn').click(function(){
            var tradeInAmount = $dialogDiv.find('#inputTradeInAmount').val();
            if(isNaN(tradeInAmount)){
                alert("Trade In amount must be greater than or equal to zero.");
                return;
            }
            buildFinishedGoodsForTradeIn(tradeInAmount);
            $dialogDiv.dialog('destroy');
            $dialogDiv.remove();
        });

        $dialogDiv.dialog({
            autoOpen: false,
            height: 170,
            //width: '80%',
            modal: true,
            // position:{my:'center top', at:'center top', of:'#thePageBlock'},
            close:function(){$dialogDiv.dialog('destroy'); $dialogDiv.remove();},
            title: 'Enter Trade In Amount to create Finished Good.'
        });

        $dialogDiv.dialog('open');

        $dialogDiv.find('#inputTradeInAmount').focus();
    }

    function buildFinishedGoodsForTradeIn(tradeInAmount)
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.buildFinishedGoodsRATradeIn}',
            '{!Id}',tradeInAmount,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function buildFinishedGoods()
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');
        var buildDate = null;
        if($j("#cogsDate").length) buildDate = $j("#cogsDate").val();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.buildFinishedGoodsRA}',
            '{!Id}', buildDate,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function unbuildFinishedGoods()
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.unbuildFinishedGoodsRA}',
            '{!Id}',
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function takeExpense()
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');
        var expenseDate = null;
        if($j("#cogsDate").length) expenseDate = $j("#cogsDate").val();
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.takeExpenseRA}',
            '{!Id}',expenseDate,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function untakeExpense()
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.untakeExpenseRA}',
            '{!Id}',
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }
    /*
        START -------------
        Build inbound Moves for Trade in Boats
    */
    function createInboundMoves()
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.createInboundMovesRA}',
            '{!Id}',
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    /*
        END ------------
    */

    function initGrid_ledger()
    {
        var gridObj = { title:"",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:true,editable:false, minWidth:80},
                        dataModel:{data:[], sorting:'local', location:'local'},
                        dragColumns:{enabled:false},
                        editable:false,
                        //editModel: {clicksToEdit:1, saveKey: jQuery.ui.keyCode.ENTER, keyUpDown: false, onSave:null, onBlur:'save'},
                        filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:0,
                        freezeRows:0,
                        height:250,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:false,
                        showTop:true,
                        showToolbar:false,
                        sortable:true,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[  {dataIndx:'projectTaskName',    title:'Task',           gFilter:'select'},
                            {dataIndx:'origin',             title:'Origin', gFilter:'text'},
                            {dataIndx:'originType',         title:'OriginType',     gFilter:'select'},
                            {dataIndx:'glType',             title:'GL Account Type', gFilter:'select'},
                            {dataIndx:'glName',             title:'GL Account',     gFilter:'select'},
                            {dataIndx:'account',            title:'Account',        gFilter:'select', hidden:true},
                            {dataIndx:'productName',        title:'Product Name',   gFilter:'select'},
                            {dataIndx:'periodName',         title:'Period',         gFilter:'select'},
                            {dataIndx:'debit',              title:'Debit',          type:'float', gFormat:'money', gTotal:true, minWidth:80, maxWidth:80},
                            {dataIndx:'credit',             title:'Credit',         type:'float', gFormat:'money', gTotal:true, minWidth:80, maxWidth:80},
                            {dataIndx:'net',                title:'Net',            type:'float', gFormat:'money', gTotal:true, minWidth:80, maxWidth:80},
                            {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'origin')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';

                        if(ui.rowData.isAccessible === 'true')
                            return'<a href=\"/'+ ui.rowData.idOrigin+'\" target=\"_blank\">'+ui.rowData.origin+'</a>';
                        return ui.rowData.strOrigin;
                    }
                });
            }
        });

        var $gridDiv = $j('#ledger');

        $gridDiv.pqGrid(gridObj);

        $gridDiv.on('pqgridrefresh', function(event, ui)
        {
            gGrid.refreshTotal($j(this),ui.pageData);
        });
    }

    function refreshGrid_ledger(){
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveLedger}',
            '{!Id}',
            function(result,event){
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

   function launchReceiveDeposit()
    {
        var $dialogDiv = $j('<div id="divDepositDialog" style=\"z-index:100 !important;\"></div>');

        var myHTML = '';
        myHTML += '<table>';
        myHTML +=   '<tr>';
        myHTML +=       '<td style="text-align:right;">Amount:&nbsp;</td>';
        myHTML +=       '<td style="text-align:left;"><input type="text" size="20" id="inputDepositAmount"></input><input type="hidden" size="20" id="inputCreditAmount"></input></td>';
        myHTML +=   '</tr>';

        myHTML +=   '<tr>';
        myHTML +=       '<td style="text-align:right;">Payment Method:&nbsp;</td>';
        myHTML +=       '<td style="text-align:right;"><select style="width:100%" id="selectDepositPaymentMethod">';

        var paymentMethodCount = paymentMethods.length;
        for(var i = 0; i < paymentMethodCount; i++)
        {
            myHTML += '<option value=\"'+paymentMethods[i]+'\">'+paymentMethods[i]+'</option>';
        }

        myHTML +=       '</select></td>';
        myHTML +=   '</tr>';

        myHTML +=   '<tr style=\"display:none !important;\">';
        myHTML +=       '<td style="text-align:right;">Bank Account:&nbsp;</td>';
        myHTML +=       '<td style="text-align:left;"><select style="width:100%" id="selectDepositBankAccount"></select></td>';
        myHTML +=   '</tr>';

        myHTML +=   '<tr>';
        myHTML +=       '<td style="text-align:right;">Payment Reference:&nbsp;</td>';
        myHTML +=       '<td style="text-align:left;"><input type="text" size="20" id="inputDepositPaymentReference" onkeyup="onKeyUpDepositPaymentReference(event)"></input></td>';
        myHTML +=   '</tr>';
        // if({!isBoatSale} == false)
        // {
        //     myHTML +=   '<tr>';
        //     myHTML +=       '<td style="text-align:right;">Create Billing:&nbsp;</td>';
        //     myHTML +=       '<td style="text-align:left;"><input type="checkbox" id="checkCreateBilling" checked="checked" /></td>';
        //     myHTML +=   '</tr>';
        // }
        // if({!isBoatSale} == false && {!isPartnerBoatSale} == false)
        // {
        //     myHTML +=   '<tr>';
        //     myHTML +=       '<td style="text-align:right;">Post Movements:&nbsp;</td>';
        //     myHTML +=       '<td style="text-align:left;"><input type="checkbox" id="checkPostProject" checked="checked" /></td>';
        //     myHTML +=   '</tr>';
        //     myHTML += '</table>';
        // }
        $dialogDiv.append($j(myHTML));

        $dialogDiv.dialog({
            autoOpen: false,
            //height: 270,
            width: 'auto',
            modal: true,
            position:{my:'center top', at:'center top', of:'#pageBlock_cash'},
            close:function(){$dialogDiv.dialog('destroy'); $dialogDiv.remove();},
            open:function(){initSelectBankAccount(); initBalanceDue();},
            title: 'Receive Payment',
            buttons: [
                        {
                          text: "Save",
                          click: function(){receiveDeposit($dialogDiv);}
                        }
                     ]
            });

        $dialogDiv.dialog('open');
        $dialogDiv.find('#selectDepositPaymentMethod').change(function(){
            var val = $j(this).val();
            if(val == 'Cheque'
                || val == 'Check'
                || val == 'Draft')
                $dialogDiv.find('#inputDepositPaymentReference').val('');
            else
                $dialogDiv.find('#inputDepositPaymentReference').val(val);
        });

        $j('#inputDepositAmount').focus();
    }

   function launchReceiveDepositAndCreateBilling()
    {
        if({!OR(isInternalLabour,isInternalPartsOrder,isInternalWarranty)}){
            createBillingWithDate();
            return;
        }
        var $dialogDiv = $j('<div id="divDepositDialogBill" style=\"z-index:100 !important;\"></div>');

        var myHTML = '';
        myHTML += '<table>';
        if({!!isInternalERP}){
            myHTML +=   '<tr>';
        }else{
            myHTML +=   '<tr class="noshow">';
        }
        myHTML +=       '<td style="text-align:right;">Payment Method:&nbsp;</td>';
        myHTML +=       '<td style="text-align:right;"><select style="width:100%" id="selectDepositPaymentMethod">';
        myHTML += '<option value=\"\">-No Payment-</option>';
        var paymentMethodCount = paymentMethods.length;
        for(var i = 0; i < paymentMethodCount; i++)
        {
            myHTML += '<option value=\"'+paymentMethods[i]+'\">'+paymentMethods[i]+'</option>';
        }

        myHTML +=       '</select></td>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr class="noshow">';
        myHTML +=       '<td style="text-align:right;">Amount:&nbsp;</td>';
        myHTML +=       '<td style="text-align:left;"><input type="text" size="20" id="inputDepositAmount"></input><input type="hidden" size="20" id="inputCreditAmount"></input></td>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr class="noshow">';
        myHTML +=       '<td style="text-align:right;">Payment Reference:&nbsp;</td>';
        myHTML +=       '<td style="text-align:left;"><input type="text" size="20" id="inputDepositPaymentReference"></input></td>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr><td colspan="2">&nbsp;</td></tr>';
        if({!isCounterSale}){
            myHTML +=   '<tr><td colspan="2">Select Warehouse to Consume inventory from</td></tr>';
            myHTML +=   '<tr>';
            myHTML +=       '<td style=\"text-align:right\" class=\"warehouse\">&nbsp;</td>';
            myHTML +=       '<td style=\"vertical-align:left;\" class=\"warehouse\">';
            myHTML +=           '<select style="width:100%" id=\"selectWarehouse\" tabindex=1></select>';
            myHTML +=       '</td>';
            myHTML +=   '</tr>';
        }
        myHTML +=   '<tr>';
        myHTML +=       '<td style="text-align:right;">Billing Date:&nbsp;</td>';
        myHTML +=       '<td style="text-align:left;"><input type="text" name="selectBillDate" id="selectBillDate"/></td>';
        myHTML +=   '</tr>';
        // myHTML +=   '<tr>';
        // myHTML +=       '<td style="text-align:right;">Post Movements:&nbsp;</td>';
        // myHTML +=       '<td style="text-align:left;"><input type="checkbox" id="checkPostProject" checked="checked" /></td>';
        // myHTML +=   '</tr>';
        myHTML += '</table>';
        $dialogDiv.append($j(myHTML));

        $dialogDiv.dialog({
            autoOpen: false,
            //height: 270,
            width: 'auto',
            modal: true,
            position:{my:'center top', at:'center top', of:'#pageBlock_cash'},
            close:function(){$dialogDiv.dialog('destroy'); $dialogDiv.remove();},
            open:function(){
                if({!isCounterSale}){
                    initSelectWarehouse();
                }
                initBalanceDue();
                var dateInput = $dialogDiv.find('input#selectBillDate');
                dateInput.datepicker({'showButtonPanel':true});
                if('{!locale}' == 'en_CA') dateInput.datepicker( "option", "dateFormat", "dd/mm/yy" );
                else  if('{!locale}' == 'fr_CA') dateInput.datepicker( "option", "dateFormat", "yy-mm-dd" );
                    dateInput.datepicker('setDate', new Date());
            },
            title: 'Save Payment/Billing',
            buttons: [
                        {
                          text: "Save",
                          click: function(){receiveDepositWithBilling($dialogDiv);}
                        }
                     ]
            });

        $dialogDiv.dialog('open');
        $dialogDiv.find('#selectDepositPaymentMethod').change(function(){
            var val = $j(this).val();
            if(val == ''){
                $dialogDiv.find(".noshow").hide();
                $dialogDiv.find('#inputDepositPaymentReference').val('');
            }else{
                $dialogDiv.find(".noshow").show();
                if(val == 'Cheque'
                    || val == 'Check'
                    || val == 'Draft')
                    $dialogDiv.find('#inputDepositPaymentReference').val('');
                else
                    $dialogDiv.find('#inputDepositPaymentReference').val(val);
            }
        });

        $j('#inputDepositAmount').focus();
    }

    function initSelectBankAccount()
    {
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveBankAccounts}',
            '{!Id}',
            function(result,event)
            {
                if(event.status)
                {
                    var $select = $j('#selectDepositBankAccount');
                    $select.children().remove();
                    jQuery.each(result, function(i,obj)
                    {
                        var option = JSON.parse(obj);
                        var $option = $j('<option>').attr('value',option.value).html(option.label);
                        $select.append($option);
                        if(option.isMostRecent && option.isMostRecent == true)
                            $select.val(option.value);
                    });
                }
                else
                {
                    alert(event.message);
                }
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function initBalanceDue()
    {
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveBalanceDue}',
            '{!Id}',
            function(result,event)
            {
                if(event.status)
                {
                    $j('#inputDepositAmount').val(result.balanceDue);
                    $j('#inputCreditAmount').val(result.creditCardTotal);
                }
                else
                {
                    alert(event.message);
                }
            },
            {buffer:true, escape:false, timeout:120000});
    }


    function onKeyUpDepositPaymentReference(e)
    {
        if(e.which == 13)
            receiveDeposit($j('#divDepositDialog'));
    }

    function receiveDeposit($dialogDiv)
    {

        var depositAmount = $j('#inputDepositAmount').val();
        var depositCreditAmount = $j('#inputCreditAmount').val();
        var depositBankAccount = $j('#selectDepositBankAccount option:selected').val();
        if(isNaN(depositCreditAmount))
            depositCreditAmount = 0;
        var paymentMethod = $j('#selectDepositPaymentMethod option:selected').val();

        if(isNaN(depositAmount) || depositAmount <= 0)
        {
            alert('The amount of the deposit must be positive.');
            return;
        }

        var depositPaymentReference = $j('#inputDepositPaymentReference').val();
        var checkCreateBilling = false;//$j('#checkCreateBilling').is(':checked');
        var checkPostProject = false;//$j('#checkPostProject').is(':checked');
        if(!depositPaymentReference || depositPaymentReference.length < 1)
        {
            alert('A payment reference must be entered.');
            return;
        }
        if((paymentMethod == 'Visa' || paymentMethod == 'MasterCard') && (parseFloat(depositCreditAmount) + parseFloat(depositAmount)) > 2000)
        {
            var $messageDiv = $j('<div>Total credit card payment on this ERP will Exceed $2000. Are you sure you want to proceed?</div>');
            $messageDiv.dialog({
                autoOpen: true,
                width: 'auto',
                modal: true,
                position:{my:'center top', at:'center top', of:'#pageBlock_cash'},
                close:function(){
                    $messageDiv.dialog('destroy');
                    $messageDiv.remove();
                },
                title: 'Confirmation',
                buttons:{
                    'Proceed':function(){
                        $messageDiv.dialog('close');
                        receiveDeposit_breakDown($dialogDiv);
                    },
                    'Cancel':function(){
                        $messageDiv.dialog('close');
                    }
                }
            });
        }else{
            receiveDeposit_breakDown($dialogDiv);
        }
    }

    function receiveDeposit_breakDown($dialogDiv)
    {

        var depositAmount = $j('#inputDepositAmount').val();
        var depositCreditAmount = $j('#inputCreditAmount').val();
        var depositBankAccount = $j('#selectDepositBankAccount option:selected').val();
        if(isNaN(depositCreditAmount))
            depositCreditAmount = 0;
        var paymentMethod = $j('#selectDepositPaymentMethod option:selected').val();

        if(isNaN(depositAmount) || depositAmount <= 0)
        {
            alert('The amount of the deposit must be positive.');
            return;
        }

        var depositPaymentReference = $j('#inputDepositPaymentReference').val();
        var checkCreateBilling = false;//$j('#checkCreateBilling').is(':checked');
        var checkPostProject = false;//$j('#checkPostProject').is(':checked');
        gSpinner.show();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.receiveDeposit}',
            '{!Id}',depositAmount,depositBankAccount,paymentMethod,depositPaymentReference,checkCreateBilling,null,
            function(result,event)
            {
                if(event.status)
                {
                    // if(result == 'OK')
                    // {
                    alert('A Cash Receipt record has been created.');
                    if({!OR(isCounterSale,isPartnerPartsOrder)} && checkCreateBilling)
                        createInvoice(result);
                    rerenderDetail();
                    refreshGrid_tasks();
                    refreshGrid_ledger();
                    rerenderCashReceipts();
                    rerenderBillings();
                    rerenderBillingLines();
                    if(checkPostProject && {!isBoatSale} == false && {!isPartnerBoatSale} == false)
                        postProject();
                    // }
                    // else
                    // {
                    //     alert(result);
                    // }
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        $dialogDiv.dialog('close');
    }

    function postProjectBeforeDeposit(mapParams,$dialogDiv)
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.createWipRA}',
            '{!Id}', mapParams.idWarehouse, mapParams.movementDate,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                        refreshAll();
                        rerenderDetail();
                        rerenderJournalEntry();
                        rerenderInboundMovements();
                    }else if({!isManufacturing})
                        buildFinishedGoods();
                    else
                        takeExpense();

                    receiveDepositAndCreateBilling(mapParams,$dialogDiv);
                }
                else
                {
                    refreshAll();
                    rerenderDetail();
                    rerenderJournalEntry();
                    rerenderInboundMovements();
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function receiveDepositAndCreateBilling(mapParams,$dialogDiv){
        gSpinner.show();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.receiveDeposit}',
            '{!Id}',
            mapParams.depositAmount,
            mapParams.bankAccount,
            mapParams.checkPaymentMethod,
            mapParams.depositPaymentReference,
            mapParams.checkCreateBilling,
            mapParams.movementDate,
            function(result,event)
            {
                if(event.status)
                {
                    if({!OR(isCounterSale,isPartnerPartsOrder)} && mapParams.checkCreateBilling)
                        createInvoice(result);
                    else
                        alert('Payment/Billing information has been saved.');

                    rerenderDetail();
                    refreshGrid_tasks();
                    refreshGrid_ledger();
                    rerenderCashReceipts();
                    rerenderBillings();
                    rerenderBillingLines();
                    if({!!isManufacturing} && {!!isCounterSale})
                        takeExpense();
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function receiveDepositWithBilling($dialogDiv)
    {
        var checkPaymentMethod = $dialogDiv.find('#selectDepositPaymentMethod option:selected').val();
        var depositAmount = $j('#inputDepositAmount').val();
        var depositCreditAmount = $j('#inputCreditAmount').val();
        var depositBankAccount = $j('#selectDepositBankAccount option:selected').val();
        if(isNaN(depositCreditAmount))
            depositCreditAmount = 0;
        var paymentMethod = $j('#selectDepositPaymentMethod option:selected').val();

        if(checkPaymentMethod != '' && (isNaN(depositAmount) || depositAmount <= 0))
        {
            alert('The amount of the deposit must be positive.');
            return;
        }

        var depositPaymentReference = $j('#inputDepositPaymentReference').val();
        var checkCreateBilling = false;//$j('#checkCreateBilling').is(':checked');
        var checkPostProject = false;//$j('#checkPostProject').is(':checked');
        if(checkPaymentMethod != '' && (!depositPaymentReference || depositPaymentReference.length < 1))
        {
            alert('A payment reference must be entered.');
            return;
        }
        if((paymentMethod == 'Visa' || paymentMethod == 'MasterCard') && (parseFloat(depositCreditAmount) + parseFloat(depositAmount)) > 2000)
        {
            var $messageDiv = $j('<div>Total credit card payment on this ERP will Exceed $2000. Are you sure you want to proceed?</div>');
            $messageDiv.dialog({
                autoOpen: true,
                width: 'auto',
                modal: true,
                position:{my:'center top', at:'center top', of:'#pageBlock_cash'},
                close:function(){
                    $messageDiv.dialog('destroy');
                    $messageDiv.remove();
                },
                title: 'Confirmation',
                buttons:{
                    'Proceed':function(){
                        $messageDiv.dialog('close');
                        receiveDepositWithBilling_Breakdown($dialogDiv);
                    },
                    'Cancel':function(){
                        $messageDiv.dialog('close');
                    }
                }
            });
        }else{
            receiveDepositWithBilling_Breakdown($dialogDiv);
        }
    }

    function receiveDepositWithBilling_Breakdown($dialogDiv)
    {

        var checkPaymentMethod = $dialogDiv.find('#selectDepositPaymentMethod option:selected').val();
        var depositAmount = $dialogDiv.find('#inputDepositAmount').val();
        var depositCreditAmount = $dialogDiv.find('#inputCreditAmount').val();
        var paymentMethod = $j('#selectDepositPaymentMethod option:selected').val();
        if(isNaN(depositCreditAmount))
            depositCreditAmount = 0;
        var depositPaymentReference = $dialogDiv.find('#inputDepositPaymentReference').val();
        var checkCreateBilling = true;//$dialogDiv.find('#checkCreateBilling').is(':checked');
        var checkPostProject = false;//$dialogDiv.find('#checkPostProject').is(':checked');
        var bankAccount = null;//$dialogDiv.find('#selectDepositBankAccount option:selected').val();
        var postingWarehouse = null;
        if({!isCounterSale}){
            var postingWarehouse = $dialogDiv.find('#selectWarehouse option:selected').val();
        }
        var selectBillDate = $dialogDiv.find('#selectBillDate').val();
        if($j("#cogsDate").length) $j("#cogsDate").val(selectBillDate);
        var mapParams = {};
        mapParams.checkPaymentMethod = checkPaymentMethod;
        mapParams.depositAmount = depositAmount;
        mapParams.creditAmount = depositCreditAmount;
        mapParams.depositPaymentReference = depositPaymentReference;
        mapParams.checkCreateBilling = checkCreateBilling;
        mapParams.checkPostProject = checkPostProject;
        mapParams.idWarehouse = postingWarehouse;
        mapParams.bankAccount = bankAccount;
        mapParams.movementDate = selectBillDate;
        if({!isCounterSale} || {!isInternalERP})
            postProjectBeforeDeposit(mapParams,$dialogDiv);
        else
            receiveDepositAndCreateBilling(mapParams,$dialogDiv);
        $dialogDiv.dialog('close');
    }

function createBillingWithDate()
{
    if({!$Permission.CanSelectBillCOGSDate})
    {
        var $dialogDiv = $j('<div id=\"dialogDivDateSelector\" style=\"z-index:100 !important;\"></div>');

        var myHTML = '';
        myHTML += '<div>';
        myHTML += '<table style="margin:0 auto;">';
        myHTML +=   '<tr>';
        myHTML +=       '<th style=\"text-align:center\" class=\"billDate\">Select Date</th>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\" class=\"billDate\">';
        myHTML +=           '<input type=\"text\" id=\"selectBillDate\" tabindex=1/>';
        myHTML +=       '</td>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\"><br/><button type=\"button\" id="btnCreateBill" tabindex=0>Create Billing</button></td>';
        myHTML +=   '</tr>';
        myHTML += '</table>';
        myHTML += '</div><br/>';

        $dialogDiv.append($j(myHTML));
        $dialogDiv.find('button#btnCreateBill').click(function(){
            var selectedDate = $dialogDiv.find('input#selectBillDate').val();
            createBilling(selectedDate);
            $dialogDiv.dialog('destroy');
            $dialogDiv.remove();
        });

        $dialogDiv.dialog({
            autoOpen: false,
            height: 170,
            //width: '80%',
            modal: true,
            // position:{my:'center top', at:'center top', of:'#thePageBlock'},
            close:function(){$dialogDiv.dialog('destroy'); $dialogDiv.remove();},
            open:function(){
                var dateInput = $dialogDiv.find('input#selectBillDate');
                dateInput.datepicker({'showButtonPanel':true});
                if('{!locale}' == 'en_CA') dateInput.datepicker( "option", "dateFormat", "dd/mm/yy" );
                else  if('{!locale}' == 'fr_CA') dateInput.datepicker( "option", "dateFormat", "yy-mm-dd" );
                    dateInput.datepicker('setDate', new Date());
            },
            title: 'Select Billing Date'
        });

        $dialogDiv.dialog('open');

        $j('#selectBillDate').focus();
    }
    else
    {
        createBilling(null);
    }
}

function createBilling(selectedDate){
        gSpinner.show();
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.createBilling}',
            '{!Id}',selectedDate,
            function(result,event)
            {
                if(event.status)
                {
                    //alert(result);
                    if(result != null)
                    {
                        alert('A new Billing has been created.');
                        if({!OR(isCounterSale,isPartnerPartsOrder,isInternalWarranty)})
                            createInvoice(result);

                        rerenderDetail();
                        refreshGrid_tasks();
                        refreshGrid_ledger();
                        rerenderBillings();
                        rerenderBillingLines();

                        if({!OR(isInternalLabour,isInternalWarranty)})
                            takeExpense();
                    }
                }
                else
                {
                    alert(event.message);
                    refreshAll();
                }
                gSpinner.hide();
            },
        {buffer:true, escape:true, timeout:120000});
}

function createInvoice(idBill){
    if(idBill == null) return;
        gSpinner.show();
        var internalOne = false;
        if({!isInternalPartsOrder})
            internalOne = true;
        else if({!isInternalWarranty})
            internalOne = true;
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.createInvoice}',
            '{!Id}',idBill,internalOne,
            function(result,event)
            {
                if(event.status)
                {
                    alert("A new {!If(OR(isPartnerPartsOrder,isInternalWarranty),'Slip','Invoice')} has been created.");
                }
                else
                {
                    alert("{!If(OR(isPartnerPartsOrder,isInternalWarranty),'Transfer','Billing')} was created but the A new {!If(isPartnerPartsOrder,'Slip','Invoice')} was not. "+event.message);
                }
                gSpinner.hide();
            },
        {buffer:true, escape:true, timeout:120000});
}

function createAP(){
    gSpinner.show();
    Visualforce.remoting.Manager.invokeAction(
        '{!$RemoteAction.gcProject_Ext.createAP}',
        '{!Id}',
        function(result,event)
        {
            if(event.status)
            {
                if(result != null)
                {
                    alert('A new AP has been created.');
                    rerenderDetail();
                    rerenderAPLines();
                    refreshGrid_tasks();
                    refreshGrid_ledger();
                }
            }
            else
            {
                alert(event.message);
                refreshAll();
            }
            gSpinner.hide();
        },
    {buffer:true, escape:true, timeout:120000});
}

/* Project Time Card Ledger */
function pqDatePicker(ui) {
    var $this = $j(this);
    $this.datepicker({
            yearRange: "-20:+0", //20 years prior to present.
            changeYear: true,
            changeMonth: true,
            //showButtonPanel: true,
            onClose: function (evt, ui) {
                $j(this).focus();
            }
        });
}

function initGrid_timeCardLedger()
    {
        var hideDollars = ({!$Permission.ProjectPageTimeCardLedgerDollarsView} == false);
        var gridObj = { title:"Time Card Ledger",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {sortable:false, sorting:'local'},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:['down','up','up'], sortIndx:['timeCardDate','glv3Name','tcv2Name']},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true},
                        freezeCols:0,
                        freezeRows:0,
                        height:250,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: { type: null},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:false,
                        sortable:false,
                        swipeModel:{on:false},
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[
                            {dataIndx:'projectTaskName',    title:'Project Task',   gFilter:'select'},
                            {dataIndx:'workOrderName',      title:'Work Order',     gFilter:'select'},
                            {dataIndx:'glv3Name',           title:'GLV3',           gFilter:'select', hidden:true},
                            {dataIndx:'tcv1Name',           title:'TCV1',           gFilter:'select'},
                            {dataIndx:'tcv2Name',           title:'TCV2',           gFilter:'select', hidden:true},
                            {dataIndx:'timeCardDate',       title:'Date',           dataType:'date', align:'center', minWidth:120},
                            {dataIndx:'employeeName',       title:'Employee',       gFilter:'select'},
                            {dataIndx:'hoursRT',            title:'Hours RT',       dataType:'float', gFormat:'number', gTotal:true, minWidth:80, maxWidth:80},
                            {dataIndx:'hoursOT',            title:'Hours OT',       dataType:'float', gFormat:'number', gTotal:true, minWidth:80, maxWidth:80},
                            {dataIndx:'hoursDT',            title:'Hours DT',       dataType:'float', gFormat:'number', gTotal:true, minWidth:80, maxWidth:80},
                            {dataIndx:'hours',              title:'Hours All',      dataType:'float', gFormat:'number', gTotal:true, minWidth:80, maxWidth:80},
                            {dataIndx:'wages',              title:'Wages',          dataType:'float', gFormat:'money',  gTotal:true, minWidth:80, maxWidth:80, hidden:hideDollars},
                            {dataIndx:'burden',             title:'Burden',         dataType:'float', gFormat:'money',  gTotal:true, minWidth:80, maxWidth:80, hidden:hideDollars},

                            {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            var dataIndx = col.dataIndx;

            if(dataIndx.substring(0,5) == 'hours')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(!ui.rowData.isTotal && parseFloat(ui.rowData[dataIndx]) == +0) return '-';
                        else return accounting.formatNumber(ui.rowData[dataIndx]);
                    }
                });
            }
            else if(dataIndx == 'timeCardDate')
                col.filter = { type: 'textbox', condition: "between", init: pqDatePicker, listeners: ['change'] };
        });

        var $gridDiv = $j('#timeCardLedger');

        $gridDiv.pqGrid(gridObj);
        gGrid.appendExportLink($gridDiv);
        //initPayrollReportBtn($gridDiv);

        $gridDiv.on('pqgridrefresh', function(event, ui)
        {
            gGrid.refreshTotal($j(this),ui.pageData);
        });
    }

    function refreshGrid_timeCardLedger(){

        var $gridDiv = $j('#timeCardLedger');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_TimeCardLedger.retrieveTimeCardLedger}',
            '{!AcctSeed__Project__c.Id}',
            function(result,event){
                if(event.status)
                {
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

////////////////////////////// End - Time Card Ledger
    function createLighteningNavigation(idRecord,type) {
        if(type == 'view')
            sforce.one.navigateToSObject(idRecord);
        else if(type == 'edit')
        {
            sforce.one.editRecord(idRecord);
        }
    }

//// Start - Journal Template Selection

    /// This method is called from the button 'New Journal From Template' on the Journal Entry List
    function openJournalTemplateSelectPop()
    {
        var $dialogDiv = $j('<div id="divNewJEDialog" style=\"z-index:100 !important;\"></div>');

        var myHTML = '';
        myHTML += '<table>';
        myHTML +=   '<tr>';
        myHTML +=       '<td style="text-align:right;">Journal Name:</td>';
        myHTML +=       '<td style="text-align:left;"><input type="text" placeholder="Search for Journal Entry to clone from..." name="inputJournalEntry" id="inputJournalEntry"/><input type="hidden" id="inputJournalEntryId" name="inputJournalEntryId" /></td>';
        myHTML +=   '</tr>';
        myHTML += '</table>';

        $dialogDiv.append($j(myHTML));

        $dialogDiv.dialog({
            autoOpen: false,
            //height: 270,
            width: 'auto',
            modal: true,
            position:{my:'center top', at:'center top', of:'#journalBlock'},
            close:function(){
                $dialogDiv.dialog('destroy');
                $dialogDiv.remove();
            },
            open:function(){initSelectBankAccount(); initBalanceDue();},
            title: 'Clone Journal Entry',
            buttons:{
                'Clone & Save':function(){
                    cloneJournal($dialogDiv);
                }
            }
        });

        $dialogDiv.dialog('open');

        $j('#inputJournalEntry').focus();
    }

    function cloneJournal($dialogDiv)
    {
        if($j('#inputJournalEntry').val() == '' || $j('#inputJournalEntryId').val() == '')
        {
            alert('Please select a Journal Entry to clone from.');
            return;
        }
        var idJournal = $j('#inputJournalEntryId').val();

        gSpinner.show();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.cloneJournalEntry}',
            '{!Id}',idJournal,
            function(result,event)
            {
                if(event.status)
                {
                    rerenderJournalEntry();
                    // var url = '/'+result;
                    // if(currentTheme == 'Theme4d')
                    //     sforce.one.navigateToURL(url);
                    // else
                    //     window.location.href = url;
                }
                else
                {
                    alert(event.message);
                }
                gSpinner.hide();
            },
            {buffer:true, escape:true, timeout:120000});

        $dialogDiv.dialog('close');
    }

    $j('body').on("focus", "#inputJournalEntry", function( event ) {
        $currentSelection = null;
        $inputField = $j(this);
        $inputField.autocomplete({
            minLength: 2,
            autoFocus: false,
            source: function (request, response) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.gcProject_Ext.searchJournalEntry}',
                     request.term,
                    function (result, event) {
                        if (event.status) {
                            $j.each(result,function(k,item){
                                if(item.label == undefined)
                                    result[k].label = item.Name;
                                if(item.value == undefined)
                                    result[k].value = item.Id;
                            })
                            response(result);
                        } else {
                            alert(event.message);
                        }
                    }, {
                        buffer: true,
                        escape: true,
                        timeout: 120000
                    });
            },
            focus: function (event, ui) {
                $j(this).val(ui.item.Name);
                $currentSelection = ui.item;
                return false;
            },
            select: function (event, ui) {
                $j(this).next().val(ui.item.Id);
                return false;
            },
            change: function (event, ui) {
                if($currentSelection != null)
                {
                    $j(this).next().val(ui.item.Id);
                    $currentSelection = null;
                }
                return false;
            }
        });
    });

    function launchWarehouseSelection(type)
    {
        if({!OR(isInternalERP,isInternalPartsOrder,isInternalLabour)}){
            warehouseSelected(type, '{!idWarehouseInternal}');
            return;
        }
        if(type == 'selected' || type == 'unconsumeSelected')
        {
            var rows = $j('#materials').pqGrid('selection', { type: 'row', method: 'getSelection' });

            if(rows.length == 0)
            {
                alert('Please select ERP Order Items to Proceed.');
                return;
            }
        }

        //// Ok So we have decided to take a simple step towards a better future. We are not going to allow the selection of warehouse anymore.
        //// Talked to Dave about it on 9/10/2018. Will see what happens
        warehouseSelected(type, '{!AcctSeed__Project__c.GMBLASERP__Warehouse__c}');
        return;

        var $dialogDiv = $j('<div id=\"dialogDivReceiveAllInventory\" style=\"z-index:100 !important;\"></div>');

        var myHTML = '';
        myHTML += '<div>';
        myHTML += '<table style="margin:0 auto;">';
        myHTML +=   '<tr>';
        myHTML +=       '<th style=\"text-align:center\" class=\"warehouse\">Select Warehouse</th>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\" class=\"warehouse\">';
        myHTML +=           '<select id=\"selectWarehouse\" tabindex=1></select>';
        myHTML +=       '</td>';
        myHTML +=   '</tr>';
        myHTML +=   '<tr>';
        myHTML +=       '<td style=\"text-align:center;vertical-align:top;\"><br/><button type=\"button\" id="btnPostProject" tabindex=0>Proceed</button></td>';
        myHTML +=   '</tr>';
        myHTML += '</table>';
        myHTML += '</div><br/>';

        $dialogDiv.append($j(myHTML));
        $dialogDiv.find('button#btnPostProject').click(function(){
            var idSelectedWarehouse = $dialogDiv.find('#selectWarehouse').val();
            warehouseSelected(type, idSelectedWarehouse);
            $dialogDiv.dialog('destroy');
            $dialogDiv.remove();
        });

        $dialogDiv.dialog({
            autoOpen: false,
            height: 170,
            //width: '80%',
            modal: true,
            // position:{my:'center top', at:'center top', of:'#thePageBlock'},
            close:function(){$dialogDiv.dialog('destroy'); $dialogDiv.remove();},
            open:function(){initSelectWarehouse();},
            title: 'Select Warehouse to consume inventory from'
        });

        $dialogDiv.dialog('open');

        $j('#selectWarehouse').focus();
    }

    function warehouseSelected(type, idSelectedWarehouse){
        if(type == 'consume')
            consumeInventory_breakDown(idSelectedWarehouse);
        else if(type == 'build')
            postProject_breakDown(idSelectedWarehouse)
        else if(type == 'selected')
            consumeInventorySelected_breakDown(idSelectedWarehouse)
        else if(type == 'unconsumeSelected')
            unconsumeInventorySelected_breakDown(idSelectedWarehouse)
        else if(type == 'unconsume')
            unconsumeInventory_breakDown(idSelectedWarehouse)
        else if(type == 'unpost')
            unpostProject_breakDown(idSelectedWarehouse)
        else if(type == 'consumeNTransfer')
            cosumeAndTransfer_breakDown(idSelectedWarehouse)
        else if(type == 'transferSelected')
            transferSelected_breakDown(idSelectedWarehouse)
        else if(type == 'undoTransferSelected')
            undoTransferSelected_breakDown(idSelectedWarehouse)
    }

    function initSelectWarehouse()
    {
        var $select = $j('#selectWarehouse');
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_Ext.retrieveWarehouses}',
            '{!Id}',
            function(result,event)
            {
                if(event.status)
                {
                    var idProjectWHS = '';
                    $j.each(result,function(i,opt){
                        var $option = $j('<option>').attr('value',opt.idWarehouse).html(opt.warehouseName);
                        $select.append($option);
                        if(opt.isProjectWarehouse == 'true')
                            idProjectWHS = opt.idWarehouse;
                    });
                    if(idDefaultWarehouse != '')
                        $select.val(idDefaultWarehouse);
                    else if(idProjectWHS != '')
                        $select.val(idProjectWHS);
                }
                else
                {
                    alert(event.message);
                }
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function transferSelected()
    {
        launchWarehouseSelection('transferSelected');
    }

    function transferSelected_breakDown(idWarehouse)
    {
        $materialsGrid = $j('#materials');
        var listIdMatrl = [];

        var rows = $materialsGrid.pqGrid('selection', { type: 'row', method: 'getSelection' });

        jQuery.each(rows, function(i,row)
        {
            if(parseFloat(row.rowData.qtyToMove) != 0)
                listIdMatrl.push(row.rowData);
        });

        if(listIdMatrl.length == 0)
        {
            alert('Select materials and put quantity to fill.');
            return;
        }
        gSpinner.show();
        var $gridDiv = $j('#ledger');

        $gridDiv.pqGrid('showLoading');
        var movementDate = null;
        if($j("#cogsDate").length) movementDate = $j("#cogsDate").val();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.createWipAndTransferelected}',
            '{!Id}', listIdMatrl, idWarehouse, movementDate,
            function(result,event)
            {
                if(event.status)
                {
                    if(result == '')
                    {
                        alert('Nothing has been transferred');
                    }else
                        createInvoice(result);

                    refreshAll();
                    rerenderInventoryTransfers();
                    rerenderDetail();
                    rerenderJournalEntry();
                    rerenderInboundMovements();
                }
                else
                {
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function undoTransferSelected()
    {
        launchWarehouseSelection('undoTransferSelected');
    }

    function undoTransferSelected_breakDown(idWarehouse)
    {
        $materialsGrid = $j('#materials');
        var listIdMatrl = [];

        var rows = $materialsGrid.pqGrid('selection', { type: 'row', method: 'getSelection' });

        jQuery.each(rows, function(i,row)
        {
            listIdMatrl.push(row.rowData.idMaterial);
        });

        if(listIdMatrl.length == 0)
        {
            alert('Select materials to undo transfer.');
            return;
        }
        gSpinner.show();
        var $gridDiv = $j('#ledger');

        $gridDiv.pqGrid('showLoading');
        var movementDate = null;
        if($j("#cogsDate").length) movementDate = $j("#cogsDate").val();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.undoTransferSelected}',
            '{!Id}', listIdMatrl, idWarehouse,
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderJournalEntry();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function cosumeAndTransfer()
    {
        launchWarehouseSelection('consumeNTransfer');
    }

    function cosumeAndTransfer_breakDown(idWarehouse)
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');
        var movementDate = null;
        if($j("#cogsDate").length) movementDate = $j("#cogsDate").val();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.createWipAndTransfer}',
            '{!Id}',idWarehouse,movementDate,
            function(result,event)
            {
                if(event.status)
                {
                    if(result == '')
                    {
                        alert('Nothing has been transferred');
                    }else
                        createInvoice(result);
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderInventoryTransfers();
                rerenderDetail();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }

    function undoTransfer()
    {
        gSpinner.show();
        var $gridDiv = $j('#ledger');
        $gridDiv.pqGrid('showLoading');
        var movementDate = null;
        if($j("#cogsDate").length) movementDate = $j("#cogsDate").val();

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcProject_AccountingActions.undoTransfer}',
            '{!Id}', '{!idWarehouseInternal}',
            function(result,event)
            {
                if(event.status)
                {
                    if(result.length > 0)
                    {
                        var myString = '';
                        jQuery.each(result, function(i,msg)
                        {
                            myString += msg;
                            myString += '\n\n';
                        });
                        alert(myString);
                    }
                }
                else
                {
                    alert(event.message);
                }
                refreshAll();
                rerenderDetail();
                rerenderInboundMovements();
                $gridDiv.pqGrid('hideLoading');
                gSpinner.hide();
            },
            {buffer:true, escape:false, timeout:120000});
    }
</script>

<!-- Search and Create serial number - start-->
<c:gcmpSearchAndCreateSerial idProject="{!Id}" />
<!-- Search and Create serial number - end-->
</apex:page>