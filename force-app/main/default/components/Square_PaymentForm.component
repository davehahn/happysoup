<apex:component controller="SquarePaymentForm_Controller">

  <script type="text/javascript" src="{!paymentFormJsUrl}">
  </script>

  <apex:slds />

  <div class="slds-scope">
    <div class="slds-grid slds-wrap sqr-payment-container">
      <div class="slds-col
                  slds-size_1-of-1
                  slds-small-size_1-of-1
                  slds-medium-size_1-of-2
                  slds-large-size_1-of-2
                  slds-p-left_small
                  slds-p-right_small">
        <label>Card Number</label>
        <div id="sq-card-number"></div>
      </div>
      <div class="slds-col
                  slds-size_1-of-1
                  slds-small-size_1-of-1
                  slds-medium-size_1-of-2
                  slds-large-size_1-of-2
                  slds-p-left_small
                  slds-p-right_small">
        <label>Expiration Date</label>
        <div id="sq-expiration-date"></div>
      </div>
      <div class="slds-col
                  slds-size_1-of-1
                  slds-small-size_1-of-1
                  slds-medium-size_1-of-2
                  slds-large-size_1-of-2
                  slds-p-left_small
                  slds-p-right_small">
        <label>CVV</label>
        <div id="sq-cvv"></div>
      </div>
      <div class="slds-col
                  slds-size_1-of-1
                  slds-small-size_1-of-1
                  slds-medium-size_1-of-2
                  slds-large-size_1-of-2
                  slds-p-left_small
                  slds-p-right_small">
        <label>Billing Postal Code</label>
        <div id="sq-postal-code"></div>
      </div>
      <!--        <button id="sq-creditcard" class="button-credit-card" onclick="onGetCardNonce(event)">Pay Invoice</button>-->
    </div>
  </div>

  <script type="text/javascript">
    let _resolve, _reject, _paymentAmount, _referenceId;

    const paymentForm = new SqPaymentForm(
    {
      applicationId: "{!applicationId}",
      inputClass: 'sqr-payment-input',
      inputStyles:
      [{
        fontSize: '14px',
        color: '#666'
      }],
      autoBuild: false,
      cardNumber:
      {
        elementId: 'sq-card-number'
      },
      cvv:
      {
        elementId: 'sq-cvv',
        placeholder: ''
      },
      expirationDate:
      {
        elementId: 'sq-expiration-date',
        placeholder: 'MM/YY'
      },
      postalCode:
      {
        elementId: 'sq-postal-code',
        placeholder: ''
      },
      callbacks:
      {
        cardNonceResponseReceived: function (errors, nonce, cardData)
        {
          console.log('cardNonceResponseReceived');
          if (errors)
          {
            _reject( errors );
          }
          SquarePaymentForm_Controller.postToSquare(
            _paymentAmount,
            _referenceId,
            nonce,
            function( events, result ) {
              console.log( result );
              if( result.statusCode === 200 )
              {

                const response = JSON.parse( result.result );
                if( response.errors )
                {
                  setErrorClassOnInput( response.errors );
                  let errs = [];
                  response.errors.forEach( e => errs.push( { message: e.detail } ) );
                  _reject( errs );
                }
                else
                {
                  console.log('LOOK HERE');
                  console.log( response.payment );
                  _resolve(  response.payment );
                }
              }
              else
              {
                console.log(result.message);
                _reject( [{message: result.message}] );
              }
            },
            {escape: false}
          );
        }
      }
    });

    paymentForm.build();

    function doPostPayment( paymentAmount, referenceId )
    {

      _reject = undefined;
      _resolve = undefined;
      _paymentAmount = paymentAmount;
      _referenceId = typeof(referenceId) === 'undefined' ? null : referenceId;

      return new Promise( ( resolve, reject ) => {
        _resolve = resolve;
        _reject = reject;
        paymentForm.requestCardNonce();
      });
    }

    function setErrorClassOnInput( errors )
    {
      errors.forEach( err => {
        if( err.code === 'CVV_FAILURE')
          document.getElementById('sq-cvv').classList.add('sqr-payment-input--error');
        if( err.code === 'ADDRESS_VERIFICATION_FAILURE' )
          document.getElementById('sq-postal-code').classList.add('sqr-payment-input--error');
        if( err.code === 'INVALID_EXPIRATION' )
          document.getElementById('sq-expiration-date').classList.add('sqr-payment-input--error');
        if( err.code === 'GENERIC_DECLINE' )
          document.getElementById('sq-card-number').classList.add('sqr-payment-input--error');
      })
    }

  </script>

</apex:component>
