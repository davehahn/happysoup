public without sharing class gcCashReceipt {

	public static Boolean disableTrigger{
		get{
			if(disableTrigger == null) return false;
			else return disableTrigger;
		}
		set{
			if(value == null) disableTrigger = false;
			else disableTrigger = value;
		}
	}

	public static void triggerHandler
		(map<Id,AcctSeed__Cash_Receipt__c> oldMap,
		 map<Id,AcctSeed__Cash_Receipt__c> newMap,
		 list<AcctSeed__Cash_Receipt__c> listNew,
		 Boolean boolIsBefore,
		 Boolean boolIsInsert,
		 Boolean boolIsUpdate,
		 Boolean boolIsDelete)
	{
		if(oldMap == NULL) oldMap = new map<Id,AcctSeed__Cash_Receipt__c>();
		if(newMap == NULL) newMap = new map<Id,AcctSeed__Cash_Receipt__c>();
		if(listNew == NULL) listNew = new list<AcctSeed__Cash_Receipt__c>();

		updateAndValidate(oldMap,newMap,listNew,boolIsBefore,boolIsInsert,boolIsUpdate,boolIsDelete);
		
		if(boolIsBefore)
		{
			if(boolIsInsert)
			{

			}
			if(boolIsUpdate)
			{

			}
			if(boolIsDelete)
			{

			}
		}
		else //i.e. trigger.isAfter
		{
			if(boolIsInsert)
			{

			}
			if(boolIsUpdate)
			{

			}
			if(boolIsDelete)
			{

			}
		}			
	}

	public static void updateAndValidate
		(map<Id,AcctSeed__Cash_Receipt__c> oldMap,
		 map<Id,AcctSeed__Cash_Receipt__c> newMap,
		 list<AcctSeed__Cash_Receipt__c> listNew,
		 Boolean boolIsBefore,
		 Boolean boolIsInsert,
		 Boolean boolIsUpdate,
		 Boolean boolIsDelete)
	{
		if(boolIsBefore && (boolIsUpdate || boolIsInsert))
		{
			retrieveStatics(listNew);
			for(AcctSeed__Cash_Receipt__c cr : listNew)
			{
				if(boolIsUpdate)
				{
					AcctSeed__Cash_Receipt__c oldRec = oldMap.get(cr.Id);
					if(cr.GMBLASG__Posted__c && 
						(cr.AcctSeed__Payment_Reference__c != oldRec.AcctSeed__Payment_Reference__c
						|| cr.Payment_Method__c != oldRec.Payment_Method__c
						|| cr.AcctSeed__Purpose__c != oldRec.AcctSeed__Purpose__c))
					{
						cr.addError('You cannot update the Payment Reference, Method or Type fields on a posted record. You must unpost the record to edit any of these fields.');
					}
				}
				if(boolIsInsert || (boolIsUpdate && cr.AcctSeed__Bank_Account__c == null))
					setBankGL(cr);
				if(cr.Payment_Method__c == 'Legend Bucks' && !cr.Is_Legend_Employee__c)
					cr.addError('To Use Legend bucks the customer must be a Legend Employee.');

				User usr = mapUser.get(UserInfo.getUserId());
				String glv1Name = usr.GL_Account_Variable_1__c;
		        if(cr.AcctSeed__GL_Account_Variable_1__c == null
		        	&& !cr.GMBLASG__Posted__c
		        	&& glv1Name != null)
		        	cr.AcctSeed__GL_Account_Variable_1__c = mapGlv1ByName.get(glv1Name).Id;
			}
		}

		if(!boolIsBefore && (boolIsInsert || boolIsUpdate))
		{
			list<AcctSeed__Cash_Receipt__c> listAll = new list<AcctSeed__Cash_Receipt__c>();
			listAll.addAll(listNew);
			listAll.addAll(oldMap.values());
			Set<Id> setIdProject = new Set<Id>();
			for(AcctSeed__Cash_Receipt__c cr : listAll)
			{
	            if(cr.AcctSeed__Project__c != null && cr.GMBLASG__Posted__c)
	                setIdProject.add(cr.AcctSeed__Project__c);
			}
			if(!setIdProject.isEmpty())
				gcProject.lockIfNoBalanceDue(setIdProject);
		}
	}

	private static void setBankGL(AcctSeed__Cash_Receipt__c cr)
	{
		Id idGlGiftCards = gcConstants.idGlGiftCards;
		Id idGlMerchantDebitCredit = gcConstants.idGlMerchantDebitCredit;
		Id idGlCashFloat = gcConstants.idGlCashFloat;
		Id idGlRBCCDN = gcConstants.idGlRBCCDN;
		String paymentMethod = cr.Payment_Method__c;
		if(paymentMethod == 'MasterCard' 
			|| paymentMethod == 'Visa' 
			|| paymentMethod == 'Debit'
			|| paymentMethod == 'Accord D')
			cr.AcctSeed__Bank_Account__c = gcConstants.idGlMerchantDebitCredit;
		else if(paymentMethod == 'Cheque' 
			|| paymentMethod == 'Check' 
			|| paymentMethod == 'Draft')
			cr.AcctSeed__Bank_Account__c = gcConstants.idGlRBCCDN;
		else if(paymentMethod == 'Cash')
			cr.AcctSeed__Bank_Account__c = gcConstants.idGlCashFloat;
		else if(paymentMethod == 'Gift Cards')
			cr.AcctSeed__Bank_Account__c = gcConstants.idGlGiftCards;
		else if(paymentMethod == 'Legend Bucks')
			cr.AcctSeed__Bank_Account__c = gcConstants.idGlLegendBucks;
		else if(paymentMethod == 'Online Store')
			cr.AcctSeed__Bank_Account__c = gcConstants.idGlMerchantOnline;
		else
			cr.AcctSeed__Bank_Account__c = gcConstants.idGlRBCCDN;
	}

	private static map<Id,AcctSeed__Project__c> mapProject;
	private static map<String,AcctSeed__Accounting_Variable__c> mapGlv1ByName;
	private static map<Id,User> mapUser;

	private static void retrieveStatics(list<AcctSeed__Cash_Receipt__c> listNew)
	{
        set<Id> setIdProject = new set<Id>();
        set<String> setNameGlv = new set<String>();

        if(mapProject == null)
        {
            mapProject = new map<Id,AcctSeed__Project__c>();
            mapGlv1ByName = new map<String,AcctSeed__Accounting_Variable__c>();
            mapUser = new map<Id,User>();
        }

		for(AcctSeed__Cash_Receipt__c cr : listNew)
		{
            if(cr.AcctSeed__Project__c != null && !mapProject.containsKey(cr.AcctSeed__Project__c))
                setIdProject.add(cr.AcctSeed__Project__c);
		}

		if(!setIdProject.isEmpty())
        for(AcctSeed__Project__c project : [SELECT Id, Name, Locked__c, AcctSeed__Status__c FROM AcctSeed__Project__c WHERE Id IN :setIdProject])
        {
            mapProject.put(project.Id,project);
        }

        for(User u : [SELECT Id, GL_Account_Variable_1__c FROM User WHERE Id =:UserInfo.getUserId()])
        {
            if(u.GL_Account_Variable_1__c != null)
                setNameGlv.add(u.GL_Account_Variable_1__c);

            mapUser.put(u.Id, u);
        }

        if(!setNameGlv.isEmpty())
        for(AcctSeed__Accounting_Variable__c glv :
            [SELECT Id,
                    Name,
                    Tax_is_Harmonized__c,
                    Tax_Rate_Provincial__c,
                    Tax_Rate_Retail__c,
                    GL_Account_Variable_3__c,
                    AcctSeed__Type__c
             FROM AcctSeed__Accounting_Variable__c
             WHERE Name IN:setNameGlv])
        {
            if(glv.AcctSeed__Type__c.equals('GL Account Variable 1'))
                mapGlv1ByName.put(glv.Name,glv);
        }
	}

	public static void coverage(){
		integer i;	
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
		i=1;
	} 
}