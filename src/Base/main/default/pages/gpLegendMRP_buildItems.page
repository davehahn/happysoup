<apex:page controller="gcLegendMRP_Items" showHeader="true" sidebar="true" cache="false" readOnly="true">
  <head>
    <style>
      tr.pq-row-select td {
        background-color: yellow;
      }
      tr.total td {
        font-weight: bold;
      }
      div.pq-grid-footer {
        display: none;
      }
      td.pq-grid-number-cell {
        width: auto !important;
      }
    </style>

    <apex:stylesheet value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.css')}" />
  </head>
  <body>
    <div style="width: 98%; margin: 0 auto">
      <table width="100%">
        <tr>
          <td width="15%"></td>
          <td width="70%" style="text-align: center">
            <span style="font-size: larger; font-weight: bold" id="myTitle"
              >Create Manufacturing Work Orders by Selecting Serials</span
            >
          </td>
          <td width="15%" style="text-align: right">
            <label>Include Pre-Rig Materials<input type="checkbox" name="addPreRig" id="addPreRig" /></label>
            <button type="button" onclick="buildSerials()">Build MFG Order with Selected Serials</button>
          </td>
        </tr>
        <tr>
          <td colspan="3">
            <div id="itemSerials"></div>
            <br />
            <div id="projects"></div>
          </td>
        </tr>
        <tr>
          <td colspan="3">
            <span style="font-weight: bold">INSTRUCTIONS:</span><br />
            <!-- The purpose of this page is to create new Manufacturing Projects, for serials that have been received but not yet finished.<br/>
            	The top grid lists all of the unimproved serials that are currently in inventory.<br/>
            	To create a manufacturing project out of a serial that appears in the top grid, check the checkbox in the rightmost column to highlight the row, and then click the "Build Selected Serials" button.<br/>
            	The bottom grid simply displays the manufacturing projects that have been created today.<br/>
            	For a more flexible view of existing manufacturing projects, navigate to the Projects tab, and select or create an appropriate list view of Projects. -->
            The top grid lists all of the serials that are currently in inventory.<br /> To create a manufacturing
            project out of a serial that appears in the top grid, check the checkbox in the rightmost column to
            highlight the row, and then click the "Build MFG Order with Selected Serials" button.<br />
            For a more flexible view of existing manufacturing projects, navigate to the Projects tab, and select or
            create an appropriate list view of Projects.
          </td>
        </tr>
      </table>
    </div>
  </body>

  <apex:includeScript value="{!$Resource.GMBLJS__jQuery}" />
  <apex:includeScript value="{!URLFOR($Resource.GMBLJS__jQueryUI,'/jquery-ui/jquery-ui.min.js')}" />
  <apex:includeScript value="{!$Resource.GMBLJS__accountingJS}" />
  <apex:includeScript value="{!$Resource.GMBLJS__ExcellentExport}" />

  <apex:includeScript value="{!URLFOR($Resource.GMBLJS__pqGridPro241,'/pqgrid.min.js')}" />

  <apex:includeScript value="{!$Resource.GMBLJS__gsrSpinner}" />
  <apex:includeScript value="{!$Resource.GMBLJS__gsrGrid2}" />

  <script>
    function setFocusOnLoad() {}
  </script>
  <script type="text/javascript">

    $j = jQuery.noConflict();

    $j(document).ready(function()
    {
        initGrid_itemSerials();
        initGrid_projects();
        refreshAll();
    });

    function refreshAll()
    {
    	refreshGrid_itemSerials();
    	refreshGrid_projects();
    }

    function initGrid_itemSerials()
    {
        var gridObj = {title:"Item Serial Inventory",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {minWidth:10, sortable:true},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:['down'], sortIndx:['dateReceived']},
                        detailModel:{cache:false},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true, type:'local'},
                        freezeCols:0,
                        freezeRows:0,
                        height:600,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true,width:45},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: {type:'null',fireSelectChange:true},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:true,
                        sortable:true,
                        swipeModel:{on:false},
                        track:false,
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: true,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:"warehouseName",        title:"Warehouse",          gFilter:"select"},
        				  {dataIndx:"productName",			title:"Product Name",		gFilter:"text"},
        				  {dataIndx:"productCode",			title:"Product Code",		gFilter:"text"},
        				  {dataIndx:"lotName",				title:"Lot",				gFilter:"text"},
        				  {dataIndx:"serialName",			title:"Serial Number",		gFilter:"text"},
        				  {dataIndx:"dateReceived",			title:"Received",			dataType:"date", align:"center"},
    		  {dataIndx:"state", title: "", minWidth:75, maxWidth:75, align: "center", cb:{header: false, all: false},
    		  	type: 'checkBoxSelection', resizable: false, sortable: false, editable: false},
    		  {dataIndx:"projectName",			title:"MFG Order",			dataType:"string", align:"left"},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'projectName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idProject) return '';

                        var myHTML = ui.rowData.projectName;

                        if({!$ObjectType.AcctSeed__Project__c.accessible})
                            return '<a href=\"/'+ui.rowData.idProject+'\" target=\"_blank\">'+myHTML+'</a>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'warehouseName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idWarehouse) return '';

                        var myHTML = ui.rowData.warehouseName;

                        if({!$ObjectType.AcctSeedERP__Warehouse__c.accessible})
                            return '<a href=\"/'+ui.rowData.idWarehouse+'\" target=\"_blank\">'+myHTML+'</a>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'productName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idProduct) return '';

                        var myHTML = ui.rowData.productName;

                        if({!$ObjectType.Product2.accessible})
                            return '<a href=\"/'+ui.rowData.idProduct+'\" target=\"_blank\">'+myHTML+'</a>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'productCode')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.productCode) return '';

                        var myHTML = ui.rowData.productCode;

                        if({!$ObjectType.Product2.accessible})
                            return '<a href=\"/'+ui.rowData.idProduct+'\" target=\"_blank\">'+myHTML+'</a>';

                        return myHTML;
                    }
                });
            }

            else if(col.dataIndx == 'lotName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idLot) return '';

                        if({!$ObjectType.GMBLASERP__Lot__c.accessible})
                            return '<a href=\"/'+ui.rowData.idLot+'\" target=\"_blank\">'+ui.rowData.lotName+'</a>';
                        else
                            return ui.rowData.lotName;
                    }
                });
            }

            else if(col.dataIndx == 'serialName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if (ui.rowData.isTotal || !ui.rowData.idSerial) return '';

                        if({!$ObjectType.GMBLASERP__Serial_Number__c.accessible})
                            return '<a href=\"/'+ui.rowData.idSerial+'\" target=\"_blank\">'+ui.rowData.serialName+'</a>';
                        else
                            return ui.rowData.serialName;
                    }
                });
            }
            else if(col.dataIndx == 'state')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return '';
                        if(ui.rowData.idProject != undefined || ui.rowData.idProject != null) return ui.rowData.projectStatus;
                    }
                });
            }
        });

        var $gridDiv = $j('#itemSerials');

        $gridDiv.pqGrid(gridObj);

        $gridDiv.on( "pqgridrowselect", function( event, ui ) {
            if(ui.rows == undefined)
            {
                if(ui.rowData.idProject != undefined || ui.rowData.idProject != null)
                    $gridDiv.pqGrid( "selection", { type:'row', method:'remove', rowIndx: ui.rowIndx });
            }
            else
            {
                $j.each(ui.rows, function(i,v){
                    if(v.rowData.idProject != undefined || v.rowData.idProject != null)
                        $gridDiv.pqGrid( "selection", { type:'row', method:'remove', rowIndx: v.rowIndx });
                });
            }
        });

        gridObj = null;
    }

    function refreshGrid_itemSerials()
    {
        var $gridDiv = $j('#itemSerials');
        $gridDiv.pqGrid('showLoading');
        $gridDiv.pqGrid('refreshHeader');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcLegendMRP_Items.retrieveItemsSerials}',
            function(result,event){
                if(event.status){
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else{
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function buildSerials()
    {
    	var listIdSerial = [];

    	var $gridDiv = $j('#itemSerials');

        var rows = $gridDiv.pqGrid('selection', { type: 'row', method: 'getSelection' });

        jQuery.each(rows, function(i,row)
        {
        	listIdSerial.push(row.rowData.idSerial);
        });

        if(listIdSerial.length == 0)
        {
        	alert('Select at least one serial to build.');
        	return;
        }
        else
        {
        	if(confirm(listIdSerial.length+' project(s) will be created'))
        	{
        		createProjects(listIdSerial);
        	}
        	else
        	{
        		return;
        	}
        }
    }

    function createProjects(listIdSerial)
    {
    	var $gridDiv = $j('#itemSerials');
    	$gridDiv.pqGrid('showLoading');
        var includePreRig = $j('#addPreRig').is(":checked");
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcLegendMRP_Items.createProjectsFromSerials}',
            listIdSerial,includePreRig,
            function(result,event){
                if(event.status){

                }
                else{
                    alert(event.message);
                }
                refreshAll();
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }

    function initGrid_projects()
    {
        var gridObj = {title:"Manufacturing Work Orders Created Today",
                        collapsible:{on:false,collapsed:false,toggle:false},
                        columnTemplate: {minWidth:10, sortable:true},
                        dataModel:{data:[], sorting:'local', location:'local', sortDir:['down'], sortIndx:['workOrderNumber']},
                        detailModel:{cache:false},
                        dragColumns:{enabled:false},
                        editable:false,
                        filterModel:{on:true, mode:'AND', header:true, type:'local'},
                        freezeCols:0,
                        freezeRows:0,
                        height:300,
                        historyModel:{on:false},
                        hoverMode:'row',
                        hwrap:false,
                        numberCell:{show:true},
                        pageModel: {type:null},
                        pasteModel:{on:false},
                        resizable: true,
                        roundCorners: false,
                        scrollModel: {autoFit:true},
                        selectionModel: {type:'null'},
                        showBottom:true,
                        showHeader:true,
                        showTitle:true,
                        showTop:true,
                        showToolbar:true,
                        sortable:true,
                        swipeModel:{on:false},
                        track:false,
                        virtualX: false,
                        //virtualXHeader: false,
                        virtualY: false,
                        width:'auto',
                        wrap:false};

        gridObj.colModel=[{dataIndx:"projectName",        	title:"Project Name",          	gFilter:"text"},
        				  {dataIndx:"workOrderNumber",	  	title:"Work Order #",		gFilter:"text"},
        				  {dataIndx:"projectStatus",		title:"Status",				gFilter:"select"},
        				  {dataIndx:"warehouseName",        title:"Warehouse",          gFilter:"select"},
        				  {dataIndx:"productName",			title:"Product Name",		gFilter:"text"},
        				  {dataIndx:"lotName",				title:"Lot",				gFilter:"text"},
        				  {dataIndx:"serialName",			title:"Serial Number",		gFilter:"text"},
                          {dataIndx:"scrollSpacer", minWidth:15, maxWidth:15}];

        gGrid.initFormat(gridObj.colModel);
        gGrid.initFilter(gridObj.colModel);

        $j.each(gridObj.colModel, function(i,col)
        {
            if(col.dataIndx == 'projectName')
            {
                $j.extend(col,{
                    render:function(ui)
                    {
                        if(ui.rowData.isTotal) return;

                        return '<a href=\"/'+ui.rowData.idProject+'\" target=\"_blank\">'+ui.rowData.projectName+'</a>';
                    }
                });
            }
        });

        var $gridDiv = $j('#projects');

        $gridDiv.pqGrid(gridObj);

        gridObj = null;
    }

    function refreshGrid_projects()
    {
        var $gridDiv = $j('#projects');
        $gridDiv.pqGrid('showLoading');

        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.gcLegendMRP_Items.retrieveManufacturingProjectsCreatedToday}',
            function(result,event){
                if(event.status){
                    gGrid.refreshGrid_callback($gridDiv,result);
                }
                else{
                    alert(event.message);
                }
                $gridDiv.pqGrid('hideLoading');
            },
            {buffer:true, escape:true, timeout:120000});
    }
  </script>
</apex:page>
