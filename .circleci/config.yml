# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
  # Use a package of configuration called an orb.
  #orbs:
  # Declare a dependency on the welcome-orb
  #  welcome: circleci/welcome-orb@0.4.1
  # Orchestrate or schedule a set of jobs
  #workflows:
  # Name the workflow "welcome"
  #  welcome:
# Run the welcome/run job in its own container
#    jobs:
#      - welcome/run
jobs:
  check-for-changes:
    docker:
      - image: legendarydevs/sfdx_deploy
    steps:
      - checkout
      - run:
          name: Check if New branch
          command: |
            set -e
            if git diff --quiet origin/staging; then exit 1; fi
  build-validation-env:
    docker:
      - image: legendarydevs/sfdx_deploy
    steps:
      - checkout
      - run:
          name: Build Validation Environment
          command: . build/circleci/create_sandbox.sh

      - persist_to_workspace:
          root: workspace
          paths:
            - org_info.json
  validate-build:
    docker:
      - image: legendarydevs/sfdx_deploy
    environment:
      GIT_BRANCH: << pipeline.git.branch >>
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      - run:
          name: Validate deployment
          no_output_timeout: 30m
          command: |
            . build/circleci/cleancode.sh
            . build/circleci/validate_build.sh
      - run:
          name: Create Pull Request
          command: . build/circleci/create_pull_request.sh staging
          when: on_success
  validate-build-fsl:
    docker:
      - image: legendarydevs/sfdx_deploy
    environment:
      GIT_BRANCH: << pipeline.git.branch >>
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      - run:
          name: Validate deployment
          no_output_timeout: 30m
          command: |
            . build/circleci/cleancode.sh
            . build/circleci/validate_build_fsl.sh
      - run:
          name: Create Pull Request
          command: . build/circleci/create_pull_request.sh stagingFSL
          when: on_success
  stage:
    docker:
      - image: legendarydevs/sfdx_deploy
    steps:
      - checkout
      - run:
          name: Authenticate Staging
          command: . build/circleci/authenticate.sh $STAGING_USER $STAGING_CONSUMER_KEY https://test.salesforce.com
      - run:
          name: Clean
          command: . build/circleci/cleancode.sh
      - run:
          name: Deploy to Staging
          no_output_timeout: 30m
          command: . build/circleci/deploy.sh
      # - run:
      #     name: Deploy Experience Bundles to Staging
      #     command: . build/circleci/deploy_experience_bundles.sh
  stageFSL:
    docker:
      - image: legendarydevs/sfdx_deploy
    steps:
      - checkout
      - run:
          name: Authenticate Staging
          command: . build/circleci/authenticate.sh $STAGING_FSL_USER $STAGING_FSL_CONSUMER_KEY https://test.salesforce.com
      - run:
          name: Clean
          command: . build/circleci/cleancode.sh
      - run:
          name: Deploy to Staging
          no_output_timeout: 30m
          command: . build/circleci/deploy_fsl.sh
  deploy:
    docker:
      - image: legendarydevs/sfdx_deploy
    steps:
      - checkout
      - run:
          name: Authenticate Production
          command: . build/circleci/authenticate.sh $PRODUCTION_USER $PRODUCTION_CONSUMER_KEY https://login.salesforce.com
      - run:
          name: Clean
          command: . build/circleci/cleancode.sh
      - run:
          name: Deploy to Production
          no_output_timeout: 30m
          command: . build/circleci/deploy.sh
      # - run:
      #     name: Deploy Experience Bundles to Staging
      #     command: . build/circleci/deploy_experience_bundles.sh
workflows:
  version: 2.1
  deploy_to_staging:
    jobs:
      - stage:
          filters:
            branches:
              only:
                - staging
  deploy_to_staging_fsl:
    jobs:
      - stageFSL:
          filters:
            branches:
              only:
                - stagingFSL
  deploy_to_production:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - master
  validate:
    jobs:
      - check-for-changes:
          filters:
            branches:
              only:
                - /feature\/.*/
                - /bugfix\/.*/
                - /declarative\/.*/
                - /sprint\/.*/
      - build-validation-env:
          requires:
            - check-for-changes
      - validate-build:
          requires:
            - build-validation-env
  validate-fsl:
    jobs:
      - check-for-changes:
          filters:
            branches:
              only:
                - /FSL\/.*/
      - build-validation-env:
          requires:
            - check-for-changes
      - validate-build-fsl:
          requires:
            - build-validation-env

